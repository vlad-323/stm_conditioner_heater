
f030f4p6_condHeater.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002410  08002410  00003410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800247c  0800247c  00004054  2**0
                  CONTENTS
  4 .ARM          00000000  0800247c  0800247c  00004054  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800247c  0800247c  00004054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800247c  0800247c  0000347c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002480  08002480  00003480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  08002484  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000054  080024d8  00004054  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080024d8  000041f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00004054  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000381f  00000000  00000000  0000407c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010be  00000000  00000000  0000789b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  00008960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000043f  00000000  00000000  00008f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b5c2  00000000  00000000  00009377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000042aa  00000000  00000000  00014939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003c5c8  00000000  00000000  00018be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000551ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018b0  00000000  00000000  000551f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00056aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000054 	.word	0x20000054
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080023f8 	.word	0x080023f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000058 	.word	0x20000058
 8000104:	080023f8 	.word	0x080023f8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	@ 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			@ (mov r8, r8)

08000234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	0002      	movs	r2, r0
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000240:	1dfb      	adds	r3, r7, #7
 8000242:	781b      	ldrb	r3, [r3, #0]
 8000244:	2b7f      	cmp	r3, #127	@ 0x7f
 8000246:	d809      	bhi.n	800025c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000248:	1dfb      	adds	r3, r7, #7
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	001a      	movs	r2, r3
 800024e:	231f      	movs	r3, #31
 8000250:	401a      	ands	r2, r3
 8000252:	4b04      	ldr	r3, [pc, #16]	@ (8000264 <__NVIC_EnableIRQ+0x30>)
 8000254:	2101      	movs	r1, #1
 8000256:	4091      	lsls	r1, r2
 8000258:	000a      	movs	r2, r1
 800025a:	601a      	str	r2, [r3, #0]
  }
}
 800025c:	46c0      	nop			@ (mov r8, r8)
 800025e:	46bd      	mov	sp, r7
 8000260:	b002      	add	sp, #8
 8000262:	bd80      	pop	{r7, pc}
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b590      	push	{r4, r7, lr}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	1dfb      	adds	r3, r7, #7
 8000274:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000276:	1dfb      	adds	r3, r7, #7
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	2b7f      	cmp	r3, #127	@ 0x7f
 800027c:	d828      	bhi.n	80002d0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800027e:	4a2f      	ldr	r2, [pc, #188]	@ (800033c <__NVIC_SetPriority+0xd4>)
 8000280:	1dfb      	adds	r3, r7, #7
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	b25b      	sxtb	r3, r3
 8000286:	089b      	lsrs	r3, r3, #2
 8000288:	33c0      	adds	r3, #192	@ 0xc0
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	589b      	ldr	r3, [r3, r2]
 800028e:	1dfa      	adds	r2, r7, #7
 8000290:	7812      	ldrb	r2, [r2, #0]
 8000292:	0011      	movs	r1, r2
 8000294:	2203      	movs	r2, #3
 8000296:	400a      	ands	r2, r1
 8000298:	00d2      	lsls	r2, r2, #3
 800029a:	21ff      	movs	r1, #255	@ 0xff
 800029c:	4091      	lsls	r1, r2
 800029e:	000a      	movs	r2, r1
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	401a      	ands	r2, r3
 80002a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	019b      	lsls	r3, r3, #6
 80002aa:	22ff      	movs	r2, #255	@ 0xff
 80002ac:	401a      	ands	r2, r3
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	0018      	movs	r0, r3
 80002b4:	2303      	movs	r3, #3
 80002b6:	4003      	ands	r3, r0
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002bc:	481f      	ldr	r0, [pc, #124]	@ (800033c <__NVIC_SetPriority+0xd4>)
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	b25b      	sxtb	r3, r3
 80002c4:	089b      	lsrs	r3, r3, #2
 80002c6:	430a      	orrs	r2, r1
 80002c8:	33c0      	adds	r3, #192	@ 0xc0
 80002ca:	009b      	lsls	r3, r3, #2
 80002cc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002ce:	e031      	b.n	8000334 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000340 <__NVIC_SetPriority+0xd8>)
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	0019      	movs	r1, r3
 80002d8:	230f      	movs	r3, #15
 80002da:	400b      	ands	r3, r1
 80002dc:	3b08      	subs	r3, #8
 80002de:	089b      	lsrs	r3, r3, #2
 80002e0:	3306      	adds	r3, #6
 80002e2:	009b      	lsls	r3, r3, #2
 80002e4:	18d3      	adds	r3, r2, r3
 80002e6:	3304      	adds	r3, #4
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	1dfa      	adds	r2, r7, #7
 80002ec:	7812      	ldrb	r2, [r2, #0]
 80002ee:	0011      	movs	r1, r2
 80002f0:	2203      	movs	r2, #3
 80002f2:	400a      	ands	r2, r1
 80002f4:	00d2      	lsls	r2, r2, #3
 80002f6:	21ff      	movs	r1, #255	@ 0xff
 80002f8:	4091      	lsls	r1, r2
 80002fa:	000a      	movs	r2, r1
 80002fc:	43d2      	mvns	r2, r2
 80002fe:	401a      	ands	r2, r3
 8000300:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	019b      	lsls	r3, r3, #6
 8000306:	22ff      	movs	r2, #255	@ 0xff
 8000308:	401a      	ands	r2, r3
 800030a:	1dfb      	adds	r3, r7, #7
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	0018      	movs	r0, r3
 8000310:	2303      	movs	r3, #3
 8000312:	4003      	ands	r3, r0
 8000314:	00db      	lsls	r3, r3, #3
 8000316:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000318:	4809      	ldr	r0, [pc, #36]	@ (8000340 <__NVIC_SetPriority+0xd8>)
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	001c      	movs	r4, r3
 8000320:	230f      	movs	r3, #15
 8000322:	4023      	ands	r3, r4
 8000324:	3b08      	subs	r3, #8
 8000326:	089b      	lsrs	r3, r3, #2
 8000328:	430a      	orrs	r2, r1
 800032a:	3306      	adds	r3, #6
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	18c3      	adds	r3, r0, r3
 8000330:	3304      	adds	r3, #4
 8000332:	601a      	str	r2, [r3, #0]
}
 8000334:	46c0      	nop			@ (mov r8, r8)
 8000336:	46bd      	mov	sp, r7
 8000338:	b003      	add	sp, #12
 800033a:	bd90      	pop	{r4, r7, pc}
 800033c:	e000e100 	.word	0xe000e100
 8000340:	e000ed00 	.word	0xe000ed00

08000344 <LL_ADC_DMA_GetRegAddr>:
  * @param  Register This parameter can be one of the following values:
  *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
  * @retval ADC register address
  */
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
 800034a:	6078      	str	r0, [r7, #4]
 800034c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument compilation warning */
  (void)Register;

  /* Retrieve address of register DR */
  return (uint32_t)&(ADCx->DR);
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	3340      	adds	r3, #64	@ 0x40
}
 8000352:	0018      	movs	r0, r3
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}

0800035a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_71CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_239CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTime)
{
 800035a:	b580      	push	{r7, lr}
 800035c:	b082      	sub	sp, #8
 800035e:	af00      	add	r7, sp, #0
 8000360:	6078      	str	r0, [r7, #4]
 8000362:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR, ADC_SMPR_SMP, SamplingTime);
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	695b      	ldr	r3, [r3, #20]
 8000368:	2207      	movs	r2, #7
 800036a:	4393      	bics	r3, r2
 800036c:	001a      	movs	r2, r3
 800036e:	683b      	ldr	r3, [r7, #0]
 8000370:	431a      	orrs	r2, r3
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	615a      	str	r2, [r3, #20]
}
 8000376:	46c0      	nop			@ (mov r8, r8)
 8000378:	46bd      	mov	sp, r7
 800037a:	b002      	add	sp, #8
 800037c:	bd80      	pop	{r7, pc}

0800037e <LL_ADC_REG_SetSequencerScanDirection>:
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_FORWARD
  *         @arg @ref LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerScanDirection(ADC_TypeDef *ADCx, uint32_t ScanDirection)
{
 800037e:	b580      	push	{r7, lr}
 8000380:	b082      	sub	sp, #8
 8000382:	af00      	add	r7, sp, #0
 8000384:	6078      	str	r0, [r7, #4]
 8000386:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_SCANDIR, ScanDirection);
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	2204      	movs	r2, #4
 800038e:	4393      	bics	r3, r2
 8000390:	001a      	movs	r2, r3
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	431a      	orrs	r2, r3
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	60da      	str	r2, [r3, #12]
}
 800039a:	46c0      	nop			@ (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <LL_ADC_REG_SetSequencerChAdd>:
  *         
  *         (1) On STM32F0, parameter not available on all devices: all devices except STM32F030x6, STM32F030x8, STM32F030xC, STM32F070x6, STM32F070xB.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b082      	sub	sp, #8
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	6078      	str	r0, [r7, #4]
 80003aa:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	035b      	lsls	r3, r3, #13
 80003b4:	0b5b      	lsrs	r3, r3, #13
 80003b6:	431a      	orrs	r2, r3
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80003bc:	46c0      	nop			@ (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b002      	add	sp, #8
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <LL_ADC_Enable+0x20>)
 80003d2:	4013      	ands	r3, r2
 80003d4:	2201      	movs	r2, #1
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80003dc:	46c0      	nop			@ (mov r8, r8)
 80003de:	46bd      	mov	sp, r7
 80003e0:	b002      	add	sp, #8
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	7fffffe8 	.word	0x7fffffe8

080003e8 <LL_ADC_StartCalibration>:
  * @rmtoll CR       ADCAL          LL_ADC_StartCalibration
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	689b      	ldr	r3, [r3, #8]
 80003f4:	4a05      	ldr	r2, [pc, #20]	@ (800040c <LL_ADC_StartCalibration+0x24>)
 80003f6:	4013      	ands	r3, r2
 80003f8:	2280      	movs	r2, #128	@ 0x80
 80003fa:	0612      	lsls	r2, r2, #24
 80003fc:	431a      	orrs	r2, r3
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL);
}
 8000402:	46c0      	nop			@ (mov r8, r8)
 8000404:	46bd      	mov	sp, r7
 8000406:	b002      	add	sp, #8
 8000408:	bd80      	pop	{r7, pc}
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	7fffffe8 	.word	0x7fffffe8

08000410 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	0fdb      	lsrs	r3, r3, #31
 800041e:	07db      	lsls	r3, r3, #31
 8000420:	2280      	movs	r2, #128	@ 0x80
 8000422:	0612      	lsls	r2, r2, #24
 8000424:	4694      	mov	ip, r2
 8000426:	4463      	add	r3, ip
 8000428:	425a      	negs	r2, r3
 800042a:	4153      	adcs	r3, r2
 800042c:	b2db      	uxtb	r3, r3
}
 800042e:	0018      	movs	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	b002      	add	sp, #8
 8000434:	bd80      	pop	{r7, pc}
	...

08000438 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	689b      	ldr	r3, [r3, #8]
 8000444:	4a04      	ldr	r2, [pc, #16]	@ (8000458 <LL_ADC_REG_StartConversion+0x20>)
 8000446:	4013      	ands	r3, r2
 8000448:	2204      	movs	r2, #4
 800044a:	431a      	orrs	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000450:	46c0      	nop			@ (mov r8, r8)
 8000452:	46bd      	mov	sp, r7
 8000454:	b002      	add	sp, #8
 8000456:	bd80      	pop	{r7, pc}
 8000458:	7fffffe8 	.word	0x7fffffe8

0800045c <LL_DMA_EnableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	3b01      	subs	r3, #1
 800046a:	4a0a      	ldr	r2, [pc, #40]	@ (8000494 <LL_DMA_EnableChannel+0x38>)
 800046c:	5cd3      	ldrb	r3, [r2, r3]
 800046e:	001a      	movs	r2, r3
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	18d3      	adds	r3, r2, r3
 8000474:	681a      	ldr	r2, [r3, #0]
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	3b01      	subs	r3, #1
 800047a:	4906      	ldr	r1, [pc, #24]	@ (8000494 <LL_DMA_EnableChannel+0x38>)
 800047c:	5ccb      	ldrb	r3, [r1, r3]
 800047e:	0019      	movs	r1, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	18cb      	adds	r3, r1, r3
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	601a      	str	r2, [r3, #0]
}
 800048a:	46c0      	nop			@ (mov r8, r8)
 800048c:	46bd      	mov	sp, r7
 800048e:	b002      	add	sp, #8
 8000490:	bd80      	pop	{r7, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)
 8000494:	08002428 	.word	0x08002428

08000498 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	3b01      	subs	r3, #1
 80004a8:	4a0b      	ldr	r2, [pc, #44]	@ (80004d8 <LL_DMA_SetDataTransferDirection+0x40>)
 80004aa:	5cd3      	ldrb	r3, [r2, r3]
 80004ac:	001a      	movs	r2, r3
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	18d3      	adds	r3, r2, r3
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a09      	ldr	r2, [pc, #36]	@ (80004dc <LL_DMA_SetDataTransferDirection+0x44>)
 80004b6:	4013      	ands	r3, r2
 80004b8:	0019      	movs	r1, r3
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	3b01      	subs	r3, #1
 80004be:	4a06      	ldr	r2, [pc, #24]	@ (80004d8 <LL_DMA_SetDataTransferDirection+0x40>)
 80004c0:	5cd3      	ldrb	r3, [r2, r3]
 80004c2:	001a      	movs	r2, r3
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	18d3      	adds	r3, r2, r3
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	430a      	orrs	r2, r1
 80004cc:	601a      	str	r2, [r3, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 80004ce:	46c0      	nop			@ (mov r8, r8)
 80004d0:	46bd      	mov	sp, r7
 80004d2:	b004      	add	sp, #16
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	46c0      	nop			@ (mov r8, r8)
 80004d8:	08002428 	.word	0x08002428
 80004dc:	ffffbfef 	.word	0xffffbfef

080004e0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b084      	sub	sp, #16
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	60b9      	str	r1, [r7, #8]
 80004ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80004ec:	68bb      	ldr	r3, [r7, #8]
 80004ee:	3b01      	subs	r3, #1
 80004f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000520 <LL_DMA_SetMode+0x40>)
 80004f2:	5cd3      	ldrb	r3, [r2, r3]
 80004f4:	001a      	movs	r2, r3
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	18d3      	adds	r3, r2, r3
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2220      	movs	r2, #32
 80004fe:	4393      	bics	r3, r2
 8000500:	0019      	movs	r1, r3
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	3b01      	subs	r3, #1
 8000506:	4a06      	ldr	r2, [pc, #24]	@ (8000520 <LL_DMA_SetMode+0x40>)
 8000508:	5cd3      	ldrb	r3, [r2, r3]
 800050a:	001a      	movs	r2, r3
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	18d3      	adds	r3, r2, r3
 8000510:	687a      	ldr	r2, [r7, #4]
 8000512:	430a      	orrs	r2, r1
 8000514:	601a      	str	r2, [r3, #0]
             Mode);
}
 8000516:	46c0      	nop			@ (mov r8, r8)
 8000518:	46bd      	mov	sp, r7
 800051a:	b004      	add	sp, #16
 800051c:	bd80      	pop	{r7, pc}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	08002428 	.word	0x08002428

08000524 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b084      	sub	sp, #16
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000530:	68bb      	ldr	r3, [r7, #8]
 8000532:	3b01      	subs	r3, #1
 8000534:	4a0b      	ldr	r2, [pc, #44]	@ (8000564 <LL_DMA_SetPeriphIncMode+0x40>)
 8000536:	5cd3      	ldrb	r3, [r2, r3]
 8000538:	001a      	movs	r2, r3
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	18d3      	adds	r3, r2, r3
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2240      	movs	r2, #64	@ 0x40
 8000542:	4393      	bics	r3, r2
 8000544:	0019      	movs	r1, r3
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	3b01      	subs	r3, #1
 800054a:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <LL_DMA_SetPeriphIncMode+0x40>)
 800054c:	5cd3      	ldrb	r3, [r2, r3]
 800054e:	001a      	movs	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	687a      	ldr	r2, [r7, #4]
 8000556:	430a      	orrs	r2, r1
 8000558:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcIncMode);
}
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	46bd      	mov	sp, r7
 800055e:	b004      	add	sp, #16
 8000560:	bd80      	pop	{r7, pc}
 8000562:	46c0      	nop			@ (mov r8, r8)
 8000564:	08002428 	.word	0x08002428

08000568 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
 800056e:	60f8      	str	r0, [r7, #12]
 8000570:	60b9      	str	r1, [r7, #8]
 8000572:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000574:	68bb      	ldr	r3, [r7, #8]
 8000576:	3b01      	subs	r3, #1
 8000578:	4a0b      	ldr	r2, [pc, #44]	@ (80005a8 <LL_DMA_SetMemoryIncMode+0x40>)
 800057a:	5cd3      	ldrb	r3, [r2, r3]
 800057c:	001a      	movs	r2, r3
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	18d3      	adds	r3, r2, r3
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	4393      	bics	r3, r2
 8000588:	0019      	movs	r1, r3
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a06      	ldr	r2, [pc, #24]	@ (80005a8 <LL_DMA_SetMemoryIncMode+0x40>)
 8000590:	5cd3      	ldrb	r3, [r2, r3]
 8000592:	001a      	movs	r2, r3
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	18d3      	adds	r3, r2, r3
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	430a      	orrs	r2, r1
 800059c:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstIncMode);
}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b004      	add	sp, #16
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	08002428 	.word	0x08002428

080005ac <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a0b      	ldr	r2, [pc, #44]	@ (80005ec <LL_DMA_SetPeriphSize+0x40>)
 80005be:	5cd3      	ldrb	r3, [r2, r3]
 80005c0:	001a      	movs	r2, r3
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	18d3      	adds	r3, r2, r3
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a09      	ldr	r2, [pc, #36]	@ (80005f0 <LL_DMA_SetPeriphSize+0x44>)
 80005ca:	4013      	ands	r3, r2
 80005cc:	0019      	movs	r1, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	3b01      	subs	r3, #1
 80005d2:	4a06      	ldr	r2, [pc, #24]	@ (80005ec <LL_DMA_SetPeriphSize+0x40>)
 80005d4:	5cd3      	ldrb	r3, [r2, r3]
 80005d6:	001a      	movs	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	18d3      	adds	r3, r2, r3
 80005dc:	687a      	ldr	r2, [r7, #4]
 80005de:	430a      	orrs	r2, r1
 80005e0:	601a      	str	r2, [r3, #0]
             PeriphOrM2MSrcDataSize);
}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b004      	add	sp, #16
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	08002428 	.word	0x08002428
 80005f0:	fffffcff 	.word	0xfffffcff

080005f4 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	3b01      	subs	r3, #1
 8000604:	4a0b      	ldr	r2, [pc, #44]	@ (8000634 <LL_DMA_SetMemorySize+0x40>)
 8000606:	5cd3      	ldrb	r3, [r2, r3]
 8000608:	001a      	movs	r2, r3
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	18d3      	adds	r3, r2, r3
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a09      	ldr	r2, [pc, #36]	@ (8000638 <LL_DMA_SetMemorySize+0x44>)
 8000612:	4013      	ands	r3, r2
 8000614:	0019      	movs	r1, r3
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	3b01      	subs	r3, #1
 800061a:	4a06      	ldr	r2, [pc, #24]	@ (8000634 <LL_DMA_SetMemorySize+0x40>)
 800061c:	5cd3      	ldrb	r3, [r2, r3]
 800061e:	001a      	movs	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	18d3      	adds	r3, r2, r3
 8000624:	687a      	ldr	r2, [r7, #4]
 8000626:	430a      	orrs	r2, r1
 8000628:	601a      	str	r2, [r3, #0]
             MemoryOrM2MDstDataSize);
}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b004      	add	sp, #16
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	08002428 	.word	0x08002428
 8000638:	fffff3ff 	.word	0xfffff3ff

0800063c <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3b01      	subs	r3, #1
 800064c:	4a0b      	ldr	r2, [pc, #44]	@ (800067c <LL_DMA_SetChannelPriorityLevel+0x40>)
 800064e:	5cd3      	ldrb	r3, [r2, r3]
 8000650:	001a      	movs	r2, r3
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	18d3      	adds	r3, r2, r3
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <LL_DMA_SetChannelPriorityLevel+0x44>)
 800065a:	4013      	ands	r3, r2
 800065c:	0019      	movs	r1, r3
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	3b01      	subs	r3, #1
 8000662:	4a06      	ldr	r2, [pc, #24]	@ (800067c <LL_DMA_SetChannelPriorityLevel+0x40>)
 8000664:	5cd3      	ldrb	r3, [r2, r3]
 8000666:	001a      	movs	r2, r3
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	18d3      	adds	r3, r2, r3
 800066c:	687a      	ldr	r2, [r7, #4]
 800066e:	430a      	orrs	r2, r1
 8000670:	601a      	str	r2, [r3, #0]
             Priority);
}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	b004      	add	sp, #16
 8000678:	bd80      	pop	{r7, pc}
 800067a:	46c0      	nop			@ (mov r8, r8)
 800067c:	08002428 	.word	0x08002428
 8000680:	ffffcfff 	.word	0xffffcfff

08000684 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_CHANNEL_7
  * @param  NbData Between Min_Data = 0 and Max_Data = 0x0000FFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t NbData)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	3b01      	subs	r3, #1
 8000694:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LL_DMA_SetDataLength+0x3c>)
 8000696:	5cd3      	ldrb	r3, [r2, r3]
 8000698:	001a      	movs	r2, r3
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	18d3      	adds	r3, r2, r3
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	0c1b      	lsrs	r3, r3, #16
 80006a2:	0419      	lsls	r1, r3, #16
 80006a4:	68bb      	ldr	r3, [r7, #8]
 80006a6:	3b01      	subs	r3, #1
 80006a8:	4a05      	ldr	r2, [pc, #20]	@ (80006c0 <LL_DMA_SetDataLength+0x3c>)
 80006aa:	5cd3      	ldrb	r3, [r2, r3]
 80006ac:	001a      	movs	r2, r3
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	18d3      	adds	r3, r2, r3
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	605a      	str	r2, [r3, #4]
             DMA_CNDTR_NDT, NbData);
}
 80006b8:	46c0      	nop			@ (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b004      	add	sp, #16
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	08002428 	.word	0x08002428

080006c4 <LL_DMA_ConfigAddresses>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ConfigAddresses(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t SrcAddress,
                                            uint32_t DstAddress, uint32_t Direction)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
 80006d0:	603b      	str	r3, [r7, #0]
  /* Direction Memory to Periph */
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b10      	cmp	r3, #16
 80006d6:	d112      	bne.n	80006fe <LL_DMA_ConfigAddresses+0x3a>
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a13      	ldr	r2, [pc, #76]	@ (800072c <LL_DMA_ConfigAddresses+0x68>)
 80006de:	5cd3      	ldrb	r3, [r2, r3]
 80006e0:	001a      	movs	r2, r3
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	60da      	str	r2, [r3, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	3b01      	subs	r3, #1
 80006ee:	4a0f      	ldr	r2, [pc, #60]	@ (800072c <LL_DMA_ConfigAddresses+0x68>)
 80006f0:	5cd3      	ldrb	r3, [r2, r3]
 80006f2:	001a      	movs	r2, r3
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	18d3      	adds	r3, r2, r3
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	609a      	str	r2, [r3, #8]
  else
  {
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
  }
}
 80006fc:	e011      	b.n	8000722 <LL_DMA_ConfigAddresses+0x5e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 80006fe:	68bb      	ldr	r3, [r7, #8]
 8000700:	3b01      	subs	r3, #1
 8000702:	4a0a      	ldr	r2, [pc, #40]	@ (800072c <LL_DMA_ConfigAddresses+0x68>)
 8000704:	5cd3      	ldrb	r3, [r2, r3]
 8000706:	001a      	movs	r2, r3
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	687a      	ldr	r2, [r7, #4]
 800070e:	609a      	str	r2, [r3, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000710:	68bb      	ldr	r3, [r7, #8]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a05      	ldr	r2, [pc, #20]	@ (800072c <LL_DMA_ConfigAddresses+0x68>)
 8000716:	5cd3      	ldrb	r3, [r2, r3]
 8000718:	001a      	movs	r2, r3
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	18d3      	adds	r3, r2, r3
 800071e:	683a      	ldr	r2, [r7, #0]
 8000720:	60da      	str	r2, [r3, #12]
}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b004      	add	sp, #16
 8000728:	bd80      	pop	{r7, pc}
 800072a:	46c0      	nop			@ (mov r8, r8)
 800072c:	08002428 	.word	0x08002428

08000730 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	3b01      	subs	r3, #1
 800073e:	4a0a      	ldr	r2, [pc, #40]	@ (8000768 <LL_DMA_EnableIT_TC+0x38>)
 8000740:	5cd3      	ldrb	r3, [r2, r3]
 8000742:	001a      	movs	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	18d3      	adds	r3, r2, r3
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	3b01      	subs	r3, #1
 800074e:	4906      	ldr	r1, [pc, #24]	@ (8000768 <LL_DMA_EnableIT_TC+0x38>)
 8000750:	5ccb      	ldrb	r3, [r1, r3]
 8000752:	0019      	movs	r1, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	18cb      	adds	r3, r1, r3
 8000758:	2102      	movs	r1, #2
 800075a:	430a      	orrs	r2, r1
 800075c:	601a      	str	r2, [r3, #0]
}
 800075e:	46c0      	nop			@ (mov r8, r8)
 8000760:	46bd      	mov	sp, r7
 8000762:	b002      	add	sp, #8
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			@ (mov r8, r8)
 8000768:	08002428 	.word	0x08002428

0800076c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	3b01      	subs	r3, #1
 800077a:	4a0a      	ldr	r2, [pc, #40]	@ (80007a4 <LL_DMA_EnableIT_TE+0x38>)
 800077c:	5cd3      	ldrb	r3, [r2, r3]
 800077e:	001a      	movs	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	18d3      	adds	r3, r2, r3
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	683b      	ldr	r3, [r7, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	4906      	ldr	r1, [pc, #24]	@ (80007a4 <LL_DMA_EnableIT_TE+0x38>)
 800078c:	5ccb      	ldrb	r3, [r1, r3]
 800078e:	0019      	movs	r1, r3
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	18cb      	adds	r3, r1, r3
 8000794:	2108      	movs	r1, #8
 8000796:	430a      	orrs	r2, r1
 8000798:	601a      	str	r2, [r3, #0]
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	08002428 	.word	0x08002428

080007a8 <LL_RCC_HSE_EnableCSS>:
  * @brief  Enable the Clock Security System.
  * @rmtoll CR           CSSON         LL_RCC_HSE_EnableCSS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableCSS(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON);
 80007ac:	4b04      	ldr	r3, [pc, #16]	@ (80007c0 <LL_RCC_HSE_EnableCSS+0x18>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b03      	ldr	r3, [pc, #12]	@ (80007c0 <LL_RCC_HSE_EnableCSS+0x18>)
 80007b2:	2180      	movs	r1, #128	@ 0x80
 80007b4:	0309      	lsls	r1, r1, #12
 80007b6:	430a      	orrs	r2, r1
 80007b8:	601a      	str	r2, [r3, #0]
}
 80007ba:	46c0      	nop			@ (mov r8, r8)
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000

080007c4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <LL_RCC_HSE_Enable+0x18>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	4b03      	ldr	r3, [pc, #12]	@ (80007dc <LL_RCC_HSE_Enable+0x18>)
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	0249      	lsls	r1, r1, #9
 80007d2:	430a      	orrs	r2, r1
 80007d4:	601a      	str	r2, [r3, #0]
}
 80007d6:	46c0      	nop			@ (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40021000 	.word	0x40021000

080007e0 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80007e4:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <LL_RCC_HSE_IsReady+0x20>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	2380      	movs	r3, #128	@ 0x80
 80007ea:	029b      	lsls	r3, r3, #10
 80007ec:	4013      	ands	r3, r2
 80007ee:	4a05      	ldr	r2, [pc, #20]	@ (8000804 <LL_RCC_HSE_IsReady+0x24>)
 80007f0:	4694      	mov	ip, r2
 80007f2:	4463      	add	r3, ip
 80007f4:	425a      	negs	r2, r3
 80007f6:	4153      	adcs	r3, r2
 80007f8:	b2db      	uxtb	r3, r3
}
 80007fa:	0018      	movs	r0, r3
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40021000 	.word	0x40021000
 8000804:	fffe0000 	.word	0xfffe0000

08000808 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <LL_RCC_SetSysClkSource+0x24>)
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	2203      	movs	r2, #3
 8000816:	4393      	bics	r3, r2
 8000818:	0019      	movs	r1, r3
 800081a:	4b04      	ldr	r3, [pc, #16]	@ (800082c <LL_RCC_SetSysClkSource+0x24>)
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	430a      	orrs	r2, r1
 8000820:	605a      	str	r2, [r3, #4]
}
 8000822:	46c0      	nop			@ (mov r8, r8)
 8000824:	46bd      	mov	sp, r7
 8000826:	b002      	add	sp, #8
 8000828:	bd80      	pop	{r7, pc}
 800082a:	46c0      	nop			@ (mov r8, r8)
 800082c:	40021000 	.word	0x40021000

08000830 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <LL_RCC_GetSysClkSource+0x14>)
 8000836:	685b      	ldr	r3, [r3, #4]
 8000838:	220c      	movs	r2, #12
 800083a:	4013      	ands	r3, r2
}
 800083c:	0018      	movs	r0, r3
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	40021000 	.word	0x40021000

08000848 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000850:	4b06      	ldr	r3, [pc, #24]	@ (800086c <LL_RCC_SetAHBPrescaler+0x24>)
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	22f0      	movs	r2, #240	@ 0xf0
 8000856:	4393      	bics	r3, r2
 8000858:	0019      	movs	r1, r3
 800085a:	4b04      	ldr	r3, [pc, #16]	@ (800086c <LL_RCC_SetAHBPrescaler+0x24>)
 800085c:	687a      	ldr	r2, [r7, #4]
 800085e:	430a      	orrs	r2, r1
 8000860:	605a      	str	r2, [r3, #4]
}
 8000862:	46c0      	nop			@ (mov r8, r8)
 8000864:	46bd      	mov	sp, r7
 8000866:	b002      	add	sp, #8
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	40021000 	.word	0x40021000

08000870 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 8000878:	4b06      	ldr	r3, [pc, #24]	@ (8000894 <LL_RCC_SetAPB1Prescaler+0x24>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <LL_RCC_SetAPB1Prescaler+0x28>)
 800087e:	4013      	ands	r3, r2
 8000880:	0019      	movs	r1, r3
 8000882:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	430a      	orrs	r2, r1
 8000888:	605a      	str	r2, [r3, #4]
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	40021000 	.word	0x40021000
 8000898:	fffff8ff 	.word	0xfffff8ff

0800089c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <LL_RCC_SetUSARTClockSource+0x30>)
 80008a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	0e12      	lsrs	r2, r2, #24
 80008ac:	2103      	movs	r1, #3
 80008ae:	4091      	lsls	r1, r2
 80008b0:	000a      	movs	r2, r1
 80008b2:	43d2      	mvns	r2, r2
 80008b4:	401a      	ands	r2, r3
 80008b6:	0011      	movs	r1, r2
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	021b      	lsls	r3, r3, #8
 80008bc:	0a1a      	lsrs	r2, r3, #8
 80008be:	4b03      	ldr	r3, [pc, #12]	@ (80008cc <LL_RCC_SetUSARTClockSource+0x30>)
 80008c0:	430a      	orrs	r2, r1
 80008c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80008c4:	46c0      	nop			@ (mov r8, r8)
 80008c6:	46bd      	mov	sp, r7
 80008c8:	b002      	add	sp, #8
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000

080008d0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b084      	sub	sp, #16
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80008d8:	4b07      	ldr	r3, [pc, #28]	@ (80008f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008da:	6959      	ldr	r1, [r3, #20]
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80008e4:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <LL_AHB1_GRP1_EnableClock+0x28>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	687a      	ldr	r2, [r7, #4]
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ee:	68fb      	ldr	r3, [r7, #12]
}
 80008f0:	46c0      	nop			@ (mov r8, r8)
 80008f2:	46bd      	mov	sp, r7
 80008f4:	b004      	add	sp, #16
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	40021000 	.word	0x40021000

080008fc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000904:	4b07      	ldr	r3, [pc, #28]	@ (8000924 <LL_APB1_GRP1_EnableClock+0x28>)
 8000906:	69d9      	ldr	r1, [r3, #28]
 8000908:	4b06      	ldr	r3, [pc, #24]	@ (8000924 <LL_APB1_GRP1_EnableClock+0x28>)
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	430a      	orrs	r2, r1
 800090e:	61da      	str	r2, [r3, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <LL_APB1_GRP1_EnableClock+0x28>)
 8000912:	69db      	ldr	r3, [r3, #28]
 8000914:	687a      	ldr	r2, [r7, #4]
 8000916:	4013      	ands	r3, r2
 8000918:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	46c0      	nop			@ (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	b004      	add	sp, #16
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000930:	4b07      	ldr	r3, [pc, #28]	@ (8000950 <LL_APB1_GRP2_EnableClock+0x28>)
 8000932:	6999      	ldr	r1, [r3, #24]
 8000934:	4b06      	ldr	r3, [pc, #24]	@ (8000950 <LL_APB1_GRP2_EnableClock+0x28>)
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	430a      	orrs	r2, r1
 800093a:	619a      	str	r2, [r3, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <LL_APB1_GRP2_EnableClock+0x28>)
 800093e:	699b      	ldr	r3, [r3, #24]
 8000940:	687a      	ldr	r2, [r7, #4]
 8000942:	4013      	ands	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000946:	68fb      	ldr	r3, [r7, #12]
}
 8000948:	46c0      	nop			@ (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	b004      	add	sp, #16
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40021000 	.word	0x40021000

08000954 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <LL_FLASH_SetLatency+0x24>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2201      	movs	r2, #1
 8000962:	4393      	bics	r3, r2
 8000964:	0019      	movs	r1, r3
 8000966:	4b04      	ldr	r3, [pc, #16]	@ (8000978 <LL_FLASH_SetLatency+0x24>)
 8000968:	687a      	ldr	r2, [r7, #4]
 800096a:	430a      	orrs	r2, r1
 800096c:	601a      	str	r2, [r3, #0]
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b002      	add	sp, #8
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	40022000 	.word	0x40022000

0800097c <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000980:	4b03      	ldr	r3, [pc, #12]	@ (8000990 <LL_FLASH_GetLatency+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	4013      	ands	r3, r2
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	40022000 	.word	0x40022000

08000994 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	2201      	movs	r2, #1
 80009a2:	431a      	orrs	r2, r3
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	601a      	str	r2, [r3, #0]
}
 80009a8:	46c0      	nop			@ (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b002      	add	sp, #8
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
    and HDSEL bits in the USART_CR3 register.
  */
#if defined(USART_LIN_SUPPORT)
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	4a07      	ldr	r2, [pc, #28]	@ (80009dc <LL_USART_ConfigAsyncMode+0x2c>)
 80009be:	401a      	ands	r2, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	605a      	str	r2, [r3, #4]
#endif /* USART_IRDA_SUPPORT */
#else
#if defined(USART_IRDA_SUPPORT)
  CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
#else
  CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	2208      	movs	r2, #8
 80009ca:	4393      	bics	r3, r2
 80009cc:	001a      	movs	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	609a      	str	r2, [r3, #8]
#endif /* USART_IRDA_SUPPORT */
#endif /* USART_SMARTCARD_SUPPORT */
}
 80009d2:	46c0      	nop			@ (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			@ (mov r8, r8)
 80009dc:	fffff7ff 	.word	0xfffff7ff

080009e0 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	2280      	movs	r2, #128	@ 0x80
 80009ee:	4013      	ands	r3, r2
 80009f0:	2b80      	cmp	r3, #128	@ 0x80
 80009f2:	d101      	bne.n	80009f8 <LL_USART_IsActiveFlag_TXE+0x18>
 80009f4:	2301      	movs	r3, #1
 80009f6:	e000      	b.n	80009fa <LL_USART_IsActiveFlag_TXE+0x1a>
 80009f8:	2300      	movs	r3, #0
}
 80009fa:	0018      	movs	r0, r3
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b002      	add	sp, #8
 8000a00:	bd80      	pop	{r7, pc}
	...

08000a04 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8000a10:	60bb      	str	r3, [r7, #8]
  return(result);
 8000a12:	68bb      	ldr	r3, [r7, #8]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	2301      	movs	r3, #1
 8000a18:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f383 8810 	msr	PRIMASK, r3
}
 8000a20:	46c0      	nop			@ (mov r8, r8)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	4a07      	ldr	r2, [pc, #28]	@ (8000a44 <LL_USART_DisableIT_CTS+0x40>)
 8000a28:	401a      	ands	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	f383 8810 	msr	PRIMASK, r3
}
 8000a38:	46c0      	nop			@ (mov r8, r8)
}
 8000a3a:	46c0      	nop			@ (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b006      	add	sp, #24
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	fffffbff 	.word	0xfffffbff

08000a48 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	000a      	movs	r2, r1
 8000a52:	1cfb      	adds	r3, r7, #3
 8000a54:	701a      	strb	r2, [r3, #0]
  USARTx->TDR = Value;
 8000a56:	1cfb      	adds	r3, r7, #3
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	b002      	add	sp, #8
 8000a66:	bd80      	pop	{r7, pc}

08000a68 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	691b      	ldr	r3, [r3, #16]
 8000a76:	683a      	ldr	r2, [r7, #0]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	683a      	ldr	r2, [r7, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	425a      	negs	r2, r3
 8000a80:	4153      	adcs	r3, r2
 8000a82:	b2db      	uxtb	r3, r3
}
 8000a84:	0018      	movs	r0, r3
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b002      	add	sp, #8
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <LL_GPIO_IsOutputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsOutputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->ODR, PinMask) == (PinMask));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	683a      	ldr	r2, [r7, #0]
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	425a      	negs	r2, r3
 8000aa4:	4153      	adcs	r3, r2
 8000aa6:	b2db      	uxtb	r3, r3
}
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	b002      	add	sp, #8
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	619a      	str	r2, [r3, #24]
}
 8000ac0:	46c0      	nop			@ (mov r8, r8)
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	b002      	add	sp, #8
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	683a      	ldr	r2, [r7, #0]
 8000ad6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000ad8:	46c0      	nop			@ (mov r8, r8)
 8000ada:	46bd      	mov	sp, r7
 8000adc:	b002      	add	sp, #8
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <USARTSend>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void USARTSend(unsigned char *pucBuffer, unsigned long ulCount)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
    //
    // Loop while there are more characters to send.
    //
    while(ulCount--)
 8000aea:	e00f      	b.n	8000b0c <USARTSend+0x2c>
    {
    	LL_USART_TransmitData8(USART1, *pucBuffer++);
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	1c5a      	adds	r2, r3, #1
 8000af0:	607a      	str	r2, [r7, #4]
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	@ (8000b20 <USARTSend+0x40>)
 8000af6:	0019      	movs	r1, r3
 8000af8:	0010      	movs	r0, r2
 8000afa:	f7ff ffa5 	bl	8000a48 <LL_USART_TransmitData8>
        /* Loop until the end of transmission */
    	while(!LL_USART_IsActiveFlag_TXE(USART1));
 8000afe:	46c0      	nop			@ (mov r8, r8)
 8000b00:	4b07      	ldr	r3, [pc, #28]	@ (8000b20 <USARTSend+0x40>)
 8000b02:	0018      	movs	r0, r3
 8000b04:	f7ff ff6c 	bl	80009e0 <LL_USART_IsActiveFlag_TXE>
 8000b08:	1e03      	subs	r3, r0, #0
 8000b0a:	d0f9      	beq.n	8000b00 <USARTSend+0x20>
    while(ulCount--)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	1e5a      	subs	r2, r3, #1
 8000b10:	603a      	str	r2, [r7, #0]
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d1ea      	bne.n	8000aec <USARTSend+0xc>
    }
}
 8000b16:	46c0      	nop			@ (mov r8, r8)
 8000b18:	46c0      	nop			@ (mov r8, r8)
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	b002      	add	sp, #8
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40013800 	.word	0x40013800

08000b24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
  __IO uint32_t wait_loop_index = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_SYSCFG);
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f7ff fefa 	bl	8000928 <LL_APB1_GRP2_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000b34:	2380      	movs	r3, #128	@ 0x80
 8000b36:	055b      	lsls	r3, r3, #21
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fedf 	bl	80008fc <LL_APB1_GRP1_EnableClock>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, 3);
 8000b3e:	2301      	movs	r3, #1
 8000b40:	425b      	negs	r3, r3
 8000b42:	2103      	movs	r1, #3
 8000b44:	0018      	movs	r0, r3
 8000b46:	f7ff fb8f 	bl	8000268 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b4a:	f000 f8db 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b4e:	f000 fa5a 	bl	8001006 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b52:	f000 fa49 	bl	8000fe8 <MX_DMA_Init>
  MX_ADC_Init();
 8000b56:	f000 f909 	bl	8000d6c <MX_ADC_Init>
  MX_USART1_UART_Init();
 8000b5a:	f000 f9c7 	bl	8000eec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  LL_DMA_ConfigAddresses(DMA1,
 8000b5e:	4b63      	ldr	r3, [pc, #396]	@ (8000cec <main+0x1c8>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	0018      	movs	r0, r3
 8000b64:	f7ff fbee 	bl	8000344 <LL_ADC_DMA_GetRegAddr>
 8000b68:	0001      	movs	r1, r0
 8000b6a:	4b61      	ldr	r3, [pc, #388]	@ (8000cf0 <main+0x1cc>)
 8000b6c:	4861      	ldr	r0, [pc, #388]	@ (8000cf4 <main+0x1d0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	9200      	str	r2, [sp, #0]
 8000b72:	000a      	movs	r2, r1
 8000b74:	2101      	movs	r1, #1
 8000b76:	f7ff fda5 	bl	80006c4 <LL_DMA_ConfigAddresses>
                         LL_DMA_CHANNEL_1,
                         LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
                         (uint32_t)&ADC_Data,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_1, 2);
 8000b7a:	4b5e      	ldr	r3, [pc, #376]	@ (8000cf4 <main+0x1d0>)
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	2101      	movs	r1, #1
 8000b80:	0018      	movs	r0, r3
 8000b82:	f7ff fd7f 	bl	8000684 <LL_DMA_SetDataLength>
  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_1);
 8000b86:	4b5b      	ldr	r3, [pc, #364]	@ (8000cf4 <main+0x1d0>)
 8000b88:	2101      	movs	r1, #1
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	f7ff fdd0 	bl	8000730 <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_1);
 8000b90:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <main+0x1d0>)
 8000b92:	2101      	movs	r1, #1
 8000b94:	0018      	movs	r0, r3
 8000b96:	f7ff fde9 	bl	800076c <LL_DMA_EnableIT_TE>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_1);
 8000b9a:	4b56      	ldr	r3, [pc, #344]	@ (8000cf4 <main+0x1d0>)
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fc5c 	bl	800045c <LL_DMA_EnableChannel>

  LL_ADC_StartCalibration(ADC1);
 8000ba4:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <main+0x1c8>)
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	f7ff fc1e 	bl	80003e8 <LL_ADC_StartCalibration>
  while (LL_ADC_IsCalibrationOnGoing(ADC1) != 0) {}
 8000bac:	46c0      	nop			@ (mov r8, r8)
 8000bae:	4b4f      	ldr	r3, [pc, #316]	@ (8000cec <main+0x1c8>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fc2d 	bl	8000410 <LL_ADC_IsCalibrationOnGoing>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d1f9      	bne.n	8000bae <main+0x8a>
  wait_loop_index = ((LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES * 32) >> 1);
 8000bba:	2320      	movs	r3, #32
 8000bbc:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000bbe:	e002      	b.n	8000bc6 <main+0xa2>
  {
    wait_loop_index--;
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d1f9      	bne.n	8000bc0 <main+0x9c>
  }
  LL_ADC_Enable(ADC1);
 8000bcc:	4b47      	ldr	r3, [pc, #284]	@ (8000cec <main+0x1c8>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f7ff fbf8 	bl	80003c4 <LL_ADC_Enable>
  LL_ADC_REG_StartConversion(ADC1);
 8000bd4:	4b45      	ldr	r3, [pc, #276]	@ (8000cec <main+0x1c8>)
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f7ff fc2e 	bl	8000438 <LL_ADC_REG_StartConversion>

  uint16_t value_in0, value_in1 = 0;
 8000bdc:	1dbb      	adds	r3, r7, #6
 8000bde:	2200      	movs	r2, #0
 8000be0:	801a      	strh	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  value_in0 = ADC_Data[0]; // темп. коспрессора
 8000be2:	1d3b      	adds	r3, r7, #4
 8000be4:	4a42      	ldr	r2, [pc, #264]	@ (8000cf0 <main+0x1cc>)
 8000be6:	8812      	ldrh	r2, [r2, #0]
 8000be8:	801a      	strh	r2, [r3, #0]
	  value_in1 = ADC_Data[1]; // темп. внешняя
 8000bea:	1dbb      	adds	r3, r7, #6
 8000bec:	4a40      	ldr	r2, [pc, #256]	@ (8000cf0 <main+0x1cc>)
 8000bee:	8852      	ldrh	r2, [r2, #2]
 8000bf0:	801a      	strh	r2, [r3, #0]

      sprintf(buffer, "Val 1:%d\r\n", value_in0 );
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	881a      	ldrh	r2, [r3, #0]
 8000bf6:	4940      	ldr	r1, [pc, #256]	@ (8000cf8 <main+0x1d4>)
 8000bf8:	4b40      	ldr	r3, [pc, #256]	@ (8000cfc <main+0x1d8>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 ff5e 	bl	8001abc <siprintf>
      USARTSend(buffer, sizeof(buffer));
 8000c00:	4b3e      	ldr	r3, [pc, #248]	@ (8000cfc <main+0x1d8>)
 8000c02:	2132      	movs	r1, #50	@ 0x32
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff ff6b 	bl	8000ae0 <USARTSend>

      sprintf(buffer, "Val 2:%d\r\n", value_in1 );
 8000c0a:	1dbb      	adds	r3, r7, #6
 8000c0c:	881a      	ldrh	r2, [r3, #0]
 8000c0e:	493c      	ldr	r1, [pc, #240]	@ (8000d00 <main+0x1dc>)
 8000c10:	4b3a      	ldr	r3, [pc, #232]	@ (8000cfc <main+0x1d8>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f000 ff52 	bl	8001abc <siprintf>
      USARTSend(buffer, sizeof(buffer));
 8000c18:	4b38      	ldr	r3, [pc, #224]	@ (8000cfc <main+0x1d8>)
 8000c1a:	2132      	movs	r1, #50	@ 0x32
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f7ff ff5f 	bl	8000ae0 <USARTSend>

      // логика управления работой компрессора и тена компрессора
      if (LL_GPIO_IsInputPinSet(Compr_state_GPIO_Port, Compr_state_Pin)) // если на входе компрессора - ничего (выс. уровень) -> компр. и тен компр. выключены
 8000c22:	2380      	movs	r3, #128	@ 0x80
 8000c24:	009a      	lsls	r2, r3, #2
 8000c26:	2390      	movs	r3, #144	@ 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	0011      	movs	r1, r2
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff ff1b 	bl	8000a68 <LL_GPIO_IsInputPinSet>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d00b      	beq.n	8000c4e <main+0x12a>
      {
    	  LL_GPIO_ResetOutputPin(Compr_ctrl_GPIO_Port, Compr_ctrl_Pin);
 8000c36:	2390      	movs	r3, #144	@ 0x90
 8000c38:	05db      	lsls	r3, r3, #23
 8000c3a:	2140      	movs	r1, #64	@ 0x40
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f7ff ff43 	bl	8000ac8 <LL_GPIO_ResetOutputPin>
    	  LL_GPIO_ResetOutputPin(TEN_compr_ctrl_GPIO_Port, TEN_compr_ctrl_Pin);
 8000c42:	2390      	movs	r3, #144	@ 0x90
 8000c44:	05db      	lsls	r3, r3, #23
 8000c46:	2180      	movs	r1, #128	@ 0x80
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff ff3d 	bl	8000ac8 <LL_GPIO_ResetOutputPin>
      }

      if (!LL_GPIO_IsInputPinSet(Compr_state_GPIO_Port, Compr_state_Pin)) // если на входе компрессора - 220 (низкий уровень)...
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	009a      	lsls	r2, r3, #2
 8000c52:	2390      	movs	r3, #144	@ 0x90
 8000c54:	05db      	lsls	r3, r3, #23
 8000c56:	0011      	movs	r1, r2
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff ff05 	bl	8000a68 <LL_GPIO_IsInputPinSet>
 8000c5e:	1e03      	subs	r3, r0, #0
 8000c60:	d11e      	bne.n	8000ca0 <main+0x17c>
      {
    	  if (value_in0 > 2000) // проверяем температуру, если меньше 0 С (ПРОВЕРИТЬ !!!)
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	881a      	ldrh	r2, [r3, #0]
 8000c66:	23fa      	movs	r3, #250	@ 0xfa
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d90c      	bls.n	8000c88 <main+0x164>
    	  {
    		  LL_GPIO_SetOutputPin(TEN_compr_ctrl_GPIO_Port, TEN_compr_ctrl_Pin); // включаем тен, греем компрессор
 8000c6e:	2390      	movs	r3, #144	@ 0x90
 8000c70:	05db      	lsls	r3, r3, #23
 8000c72:	2180      	movs	r1, #128	@ 0x80
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff ff1b 	bl	8000ab0 <LL_GPIO_SetOutputPin>
    		  LL_GPIO_ResetOutputPin(Compr_ctrl_GPIO_Port, Compr_ctrl_Pin);
 8000c7a:	2390      	movs	r3, #144	@ 0x90
 8000c7c:	05db      	lsls	r3, r3, #23
 8000c7e:	2140      	movs	r1, #64	@ 0x40
 8000c80:	0018      	movs	r0, r3
 8000c82:	f7ff ff21 	bl	8000ac8 <LL_GPIO_ResetOutputPin>
 8000c86:	e00b      	b.n	8000ca0 <main+0x17c>
    	  }
    	  else // компрессор теплый, греть не имеет смысла
    	  {
    		  LL_GPIO_ResetOutputPin(TEN_compr_ctrl_GPIO_Port, TEN_compr_ctrl_Pin); // выключаем тен
 8000c88:	2390      	movs	r3, #144	@ 0x90
 8000c8a:	05db      	lsls	r3, r3, #23
 8000c8c:	2180      	movs	r1, #128	@ 0x80
 8000c8e:	0018      	movs	r0, r3
 8000c90:	f7ff ff1a 	bl	8000ac8 <LL_GPIO_ResetOutputPin>
    		  LL_GPIO_SetOutputPin(Compr_ctrl_GPIO_Port, Compr_ctrl_Pin); // а компрессор включаем
 8000c94:	2390      	movs	r3, #144	@ 0x90
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	2140      	movs	r1, #64	@ 0x40
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff ff08 	bl	8000ab0 <LL_GPIO_SetOutputPin>
    	  }
      }

      // логика работы для режима оттайки
      if (LL_GPIO_IsOutputPinSet(Compr_ctrl_GPIO_Port, Compr_ctrl_Pin) && LL_GPIO_IsInputPinSet(Valve_state_GPIO_Port, Valve_state_Pin) && value_in1 > 2000) // включен компрессор, 4х ходовой отключен и температура на улице меньше 0
 8000ca0:	2390      	movs	r3, #144	@ 0x90
 8000ca2:	05db      	lsls	r3, r3, #23
 8000ca4:	2140      	movs	r1, #64	@ 0x40
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f7ff fef0 	bl	8000a8c <LL_GPIO_IsOutputPinSet>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d016      	beq.n	8000cde <main+0x1ba>
 8000cb0:	2380      	movs	r3, #128	@ 0x80
 8000cb2:	00da      	lsls	r2, r3, #3
 8000cb4:	2390      	movs	r3, #144	@ 0x90
 8000cb6:	05db      	lsls	r3, r3, #23
 8000cb8:	0011      	movs	r1, r2
 8000cba:	0018      	movs	r0, r3
 8000cbc:	f7ff fed4 	bl	8000a68 <LL_GPIO_IsInputPinSet>
 8000cc0:	1e03      	subs	r3, r0, #0
 8000cc2:	d00c      	beq.n	8000cde <main+0x1ba>
 8000cc4:	1dbb      	adds	r3, r7, #6
 8000cc6:	881a      	ldrh	r2, [r3, #0]
 8000cc8:	23fa      	movs	r3, #250	@ 0xfa
 8000cca:	00db      	lsls	r3, r3, #3
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d906      	bls.n	8000cde <main+0x1ba>
      {
    	  LL_GPIO_SetOutputPin(TEN_pallet_ctrl_GPIO_Port,TEN_pallet_ctrl_Pin);
 8000cd0:	2390      	movs	r3, #144	@ 0x90
 8000cd2:	05db      	lsls	r3, r3, #23
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f7ff feea 	bl	8000ab0 <LL_GPIO_SetOutputPin>
 8000cdc:	e005      	b.n	8000cea <main+0x1c6>
      }
      else
      {
    	  LL_GPIO_ResetOutputPin(TEN_pallet_ctrl_GPIO_Port,TEN_pallet_ctrl_Pin);
 8000cde:	2390      	movs	r3, #144	@ 0x90
 8000ce0:	05db      	lsls	r3, r3, #23
 8000ce2:	2120      	movs	r1, #32
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f7ff feef 	bl	8000ac8 <LL_GPIO_ResetOutputPin>
	  value_in0 = ADC_Data[0]; // темп. коспрессора
 8000cea:	e77a      	b.n	8000be2 <main+0xbe>
 8000cec:	40012400 	.word	0x40012400
 8000cf0:	200000a4 	.word	0x200000a4
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	08002410 	.word	0x08002410
 8000cfc:	20000070 	.word	0x20000070
 8000d00:	0800241c 	.word	0x0800241c

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000d08:	2000      	movs	r0, #0
 8000d0a:	f7ff fe23 	bl	8000954 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8000d0e:	46c0      	nop			@ (mov r8, r8)
 8000d10:	f7ff fe34 	bl	800097c <LL_FLASH_GetLatency>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d1fb      	bne.n	8000d10 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 8000d18:	f7ff fd54 	bl	80007c4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000d1c:	46c0      	nop			@ (mov r8, r8)
 8000d1e:	f7ff fd5f 	bl	80007e0 <LL_RCC_HSE_IsReady>
 8000d22:	0003      	movs	r3, r0
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d1fa      	bne.n	8000d1e <SystemClock_Config+0x1a>
  {

  }
  LL_RCC_HSE_EnableCSS();
 8000d28:	f7ff fd3e 	bl	80007a8 <LL_RCC_HSE_EnableCSS>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d2c:	2000      	movs	r0, #0
 8000d2e:	f7ff fd8b 	bl	8000848 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fd9c 	bl	8000870 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f7ff fd65 	bl	8000808 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8000d3e:	46c0      	nop			@ (mov r8, r8)
 8000d40:	f7ff fd76 	bl	8000830 <LL_RCC_GetSysClkSource>
 8000d44:	0003      	movs	r3, r0
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d1fa      	bne.n	8000d40 <SystemClock_Config+0x3c>
  {

  }
  LL_Init1msTick(8000000);
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <SystemClock_Config+0x64>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fe97 	bl	8001a80 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SystemClock_Config+0x64>)
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 fea3 	bl	8001aa0 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff fd9e 	bl	800089c <LL_RCC_SetUSARTClockSource>
}
 8000d60:	46c0      	nop			@ (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			@ (mov r8, r8)
 8000d68:	007a1200 	.word	0x007a1200

08000d6c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000d6c:	b5b0      	push	{r4, r5, r7, lr}
 8000d6e:	b090      	sub	sp, #64	@ 0x40
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000d72:	2530      	movs	r5, #48	@ 0x30
 8000d74:	197b      	adds	r3, r7, r5
 8000d76:	0018      	movs	r0, r3
 8000d78:	2310      	movs	r3, #16
 8000d7a:	001a      	movs	r2, r3
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	f000 febd 	bl	8001afc <memset>
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000d82:	241c      	movs	r4, #28
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	2314      	movs	r3, #20
 8000d8a:	001a      	movs	r2, r3
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	f000 feb5 	bl	8001afc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	0018      	movs	r0, r3
 8000d96:	2318      	movs	r3, #24
 8000d98:	001a      	movs	r2, r3
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	f000 feae 	bl	8001afc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_ADC1);
 8000da0:	2380      	movs	r3, #128	@ 0x80
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fdbf 	bl	8000928 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000daa:	2380      	movs	r3, #128	@ 0x80
 8000dac:	029b      	lsls	r3, r3, #10
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fd8e 	bl	80008d0 <LL_AHB1_GRP1_EnableClock>
  /**ADC GPIO Configuration
  PA0   ------> ADC_IN0
  PA1   ------> ADC_IN1
  */
  GPIO_InitStruct.Pin = NTC_outside_Pin;
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2201      	movs	r2, #1
 8000db8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2203      	movs	r2, #3
 8000dbe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(NTC_outside_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	1d3a      	adds	r2, r7, #4
 8000dc8:	2390      	movs	r3, #144	@ 0x90
 8000dca:	05db      	lsls	r3, r3, #23
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 fbcb 	bl	800156a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = NTC_compr_Pin;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2203      	movs	r2, #3
 8000dde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	2200      	movs	r2, #0
 8000de4:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(NTC_compr_GPIO_Port, &GPIO_InitStruct);
 8000de6:	1d3a      	adds	r2, r7, #4
 8000de8:	2390      	movs	r3, #144	@ 0x90
 8000dea:	05db      	lsls	r3, r3, #23
 8000dec:	0011      	movs	r1, r2
 8000dee:	0018      	movs	r0, r3
 8000df0:	f000 fbbb 	bl	800156a <LL_GPIO_Init>

  /* ADC DMA Init */

  /* ADC Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000df4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	2101      	movs	r1, #1
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f7ff fb4c 	bl	8000498 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_HIGH);
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	4836      	ldr	r0, [pc, #216]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000e06:	001a      	movs	r2, r3
 8000e08:	2101      	movs	r1, #1
 8000e0a:	f7ff fc17 	bl	800063c <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_CIRCULAR);
 8000e0e:	4b34      	ldr	r3, [pc, #208]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000e10:	2220      	movs	r2, #32
 8000e12:	2101      	movs	r1, #1
 8000e14:	0018      	movs	r0, r3
 8000e16:	f7ff fb63 	bl	80004e0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 8000e1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	0018      	movs	r0, r3
 8000e22:	f7ff fb7f 	bl	8000524 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 8000e26:	4b2e      	ldr	r3, [pc, #184]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000e28:	2280      	movs	r2, #128	@ 0x80
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	0018      	movs	r0, r3
 8000e2e:	f7ff fb9b 	bl	8000568 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000e32:	2380      	movs	r3, #128	@ 0x80
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	482a      	ldr	r0, [pc, #168]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000e38:	001a      	movs	r2, r3
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	f7ff fbb6 	bl	80005ac <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000e40:	2380      	movs	r3, #128	@ 0x80
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	4826      	ldr	r0, [pc, #152]	@ (8000ee0 <MX_ADC_Init+0x174>)
 8000e46:	001a      	movs	r2, r3
 8000e48:	2101      	movs	r1, #1
 8000e4a:	f7ff fbd3 	bl	80005f4 <LL_DMA_SetMemorySize>

  /* ADC interrupt Init */
  NVIC_SetPriority(ADC1_IRQn, 0);
 8000e4e:	2100      	movs	r1, #0
 8000e50:	200c      	movs	r0, #12
 8000e52:	f7ff fa09 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(ADC1_IRQn);
 8000e56:	200c      	movs	r0, #12
 8000e58:	f7ff f9ec 	bl	8000234 <__NVIC_EnableIRQ>

  /* USER CODE END ADC_Init 1 */

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_0);
 8000e5c:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <MX_ADC_Init+0x178>)
 8000e5e:	2101      	movs	r1, #1
 8000e60:	0018      	movs	r0, r3
 8000e62:	f7ff fa9e 	bl	80003a2 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerChAdd(ADC1, LL_ADC_CHANNEL_1);
 8000e66:	4a20      	ldr	r2, [pc, #128]	@ (8000ee8 <MX_ADC_Init+0x17c>)
 8000e68:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <MX_ADC_Init+0x178>)
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff fa98 	bl	80003a2 <LL_ADC_REG_SetSequencerChAdd>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e72:	197b      	adds	r3, r7, r5
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	05d2      	lsls	r2, r2, #23
 8000e78:	601a      	str	r2, [r3, #0]
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 8000e7a:	197b      	adds	r3, r7, r5
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	605a      	str	r2, [r3, #4]
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 8000e80:	197b      	adds	r3, r7, r5
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000e86:	197b      	adds	r3, r7, r5
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8000e8c:	197b      	adds	r3, r7, r5
 8000e8e:	4a15      	ldr	r2, [pc, #84]	@ (8000ee4 <MX_ADC_Init+0x178>)
 8000e90:	0019      	movs	r1, r3
 8000e92:	0010      	movs	r0, r2
 8000e94:	f000 fa48 	bl	8001328 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000e98:	193b      	adds	r3, r7, r4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000ea4:	193b      	adds	r3, r7, r4
 8000ea6:	2280      	movs	r2, #128	@ 0x80
 8000ea8:	0192      	lsls	r2, r2, #6
 8000eaa:	609a      	str	r2, [r3, #8]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8000eac:	193b      	adds	r3, r7, r4
 8000eae:	2203      	movs	r2, #3
 8000eb0:	60da      	str	r2, [r3, #12]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8000eb8:	193b      	adds	r3, r7, r4
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <MX_ADC_Init+0x178>)
 8000ebc:	0019      	movs	r1, r3
 8000ebe:	0010      	movs	r0, r2
 8000ec0:	f000 fa68 	bl	8001394 <LL_ADC_REG_Init>
  LL_ADC_REG_SetSequencerScanDirection(ADC1, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_ADC_Init+0x178>)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	0018      	movs	r0, r3
 8000eca:	f7ff fa58 	bl	800037e <LL_ADC_REG_SetSequencerScanDirection>
  LL_ADC_SetSamplingTimeCommonChannels(ADC1, LL_ADC_SAMPLINGTIME_239CYCLES_5);
 8000ece:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <MX_ADC_Init+0x178>)
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	f7ff fa41 	bl	800035a <LL_ADC_SetSamplingTimeCommonChannels>
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b010      	add	sp, #64	@ 0x40
 8000ede:	bdb0      	pop	{r4, r5, r7, pc}
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40012400 	.word	0x40012400
 8000ee8:	04000002 	.word	0x04000002

08000eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b08f      	sub	sp, #60	@ 0x3c
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000ef2:	241c      	movs	r4, #28
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	0018      	movs	r0, r3
 8000ef8:	231c      	movs	r3, #28
 8000efa:	001a      	movs	r2, r3
 8000efc:	2100      	movs	r1, #0
 8000efe:	f000 fdfd 	bl	8001afc <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	1d3b      	adds	r3, r7, #4
 8000f04:	0018      	movs	r0, r3
 8000f06:	2318      	movs	r3, #24
 8000f08:	001a      	movs	r2, r3
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	f000 fdf6 	bl	8001afc <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_USART1);
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	01db      	lsls	r3, r3, #7
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fd07 	bl	8000928 <LL_APB1_GRP2_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000f1a:	2380      	movs	r3, #128	@ 0x80
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff fcd6 	bl	80008d0 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA2   ------> USART1_TX
  PA3   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	2204      	movs	r2, #4
 8000f28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f30:	1d3b      	adds	r3, r7, #4
 8000f32:	2203      	movs	r2, #3
 8000f34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f36:	1d3b      	adds	r3, r7, #4
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2201      	movs	r2, #1
 8000f46:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f48:	1d3a      	adds	r2, r7, #4
 8000f4a:	2390      	movs	r3, #144	@ 0x90
 8000f4c:	05db      	lsls	r3, r3, #23
 8000f4e:	0011      	movs	r1, r2
 8000f50:	0018      	movs	r0, r3
 8000f52:	f000 fb0a 	bl	800156a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8000f56:	1d3b      	adds	r3, r7, #4
 8000f58:	2208      	movs	r2, #8
 8000f5a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f5c:	1d3b      	adds	r3, r7, #4
 8000f5e:	2202      	movs	r2, #2
 8000f60:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000f62:	1d3b      	adds	r3, r7, #4
 8000f64:	2203      	movs	r2, #3
 8000f66:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f68:	1d3b      	adds	r3, r7, #4
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000f74:	1d3b      	adds	r3, r7, #4
 8000f76:	2201      	movs	r2, #1
 8000f78:	615a      	str	r2, [r3, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	1d3a      	adds	r2, r7, #4
 8000f7c:	2390      	movs	r3, #144	@ 0x90
 8000f7e:	05db      	lsls	r3, r3, #23
 8000f80:	0011      	movs	r1, r2
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 faf1 	bl	800156a <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 19200;
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	2296      	movs	r2, #150	@ 0x96
 8000f8c:	01d2      	lsls	r2, r2, #7
 8000f8e:	601a      	str	r2, [r3, #0]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000f90:	0021      	movs	r1, r4
 8000f92:	187b      	adds	r3, r7, r1
 8000f94:	2200      	movs	r2, #0
 8000f96:	605a      	str	r2, [r3, #4]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000f9e:	187b      	adds	r3, r7, r1
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	60da      	str	r2, [r3, #12]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000fa4:	187b      	adds	r3, r7, r1
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	611a      	str	r2, [r3, #16]
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000faa:	187b      	adds	r3, r7, r1
 8000fac:	2200      	movs	r2, #0
 8000fae:	615a      	str	r2, [r3, #20]
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  LL_USART_Init(USART1, &USART_InitStruct);
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	4a0a      	ldr	r2, [pc, #40]	@ (8000fe4 <MX_USART1_UART_Init+0xf8>)
 8000fba:	0019      	movs	r1, r3
 8000fbc:	0010      	movs	r0, r2
 8000fbe:	f000 fced 	bl	800199c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8000fc2:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <MX_USART1_UART_Init+0xf8>)
 8000fc4:	0018      	movs	r0, r3
 8000fc6:	f7ff fd1d 	bl	8000a04 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <MX_USART1_UART_Init+0xf8>)
 8000fcc:	0018      	movs	r0, r3
 8000fce:	f7ff fcef 	bl	80009b0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <MX_USART1_UART_Init+0xf8>)
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	f7ff fcdd 	bl	8000994 <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	b00f      	add	sp, #60	@ 0x3c
 8000fe0:	bd90      	pop	{r4, r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	40013800 	.word	0x40013800

08000fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000fec:	2001      	movs	r0, #1
 8000fee:	f7ff fc6f 	bl	80008d0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, 1);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	2009      	movs	r0, #9
 8000ff6:	f7ff f937 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000ffa:	2009      	movs	r0, #9
 8000ffc:	f7ff f91a 	bl	8000234 <__NVIC_EnableIRQ>

}
 8001000:	46c0      	nop			@ (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100c:	003b      	movs	r3, r7
 800100e:	0018      	movs	r0, r3
 8001010:	2318      	movs	r3, #24
 8001012:	001a      	movs	r2, r3
 8001014:	2100      	movs	r1, #0
 8001016:	f000 fd71 	bl	8001afc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 800101a:	2380      	movs	r3, #128	@ 0x80
 800101c:	03db      	lsls	r3, r3, #15
 800101e:	0018      	movs	r0, r3
 8001020:	f7ff fc56 	bl	80008d0 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001024:	2380      	movs	r3, #128	@ 0x80
 8001026:	029b      	lsls	r3, r3, #10
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff fc51 	bl	80008d0 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LED_state_GPIO_Port, LED_state_Pin);
 800102e:	2390      	movs	r3, #144	@ 0x90
 8001030:	05db      	lsls	r3, r3, #23
 8001032:	2110      	movs	r1, #16
 8001034:	0018      	movs	r0, r3
 8001036:	f7ff fd47 	bl	8000ac8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEN_pallet_ctrl_GPIO_Port, TEN_pallet_ctrl_Pin);
 800103a:	2390      	movs	r3, #144	@ 0x90
 800103c:	05db      	lsls	r3, r3, #23
 800103e:	2120      	movs	r1, #32
 8001040:	0018      	movs	r0, r3
 8001042:	f7ff fd41 	bl	8000ac8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(Compr_ctrl_GPIO_Port, Compr_ctrl_Pin);
 8001046:	2390      	movs	r3, #144	@ 0x90
 8001048:	05db      	lsls	r3, r3, #23
 800104a:	2140      	movs	r1, #64	@ 0x40
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff fd3b 	bl	8000ac8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TEN_compr_ctrl_GPIO_Port, TEN_compr_ctrl_Pin);
 8001052:	2390      	movs	r3, #144	@ 0x90
 8001054:	05db      	lsls	r3, r3, #23
 8001056:	2180      	movs	r1, #128	@ 0x80
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fd35 	bl	8000ac8 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED_state_Pin;
 800105e:	003b      	movs	r3, r7
 8001060:	2210      	movs	r2, #16
 8001062:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001064:	003b      	movs	r3, r7
 8001066:	2201      	movs	r2, #1
 8001068:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800106a:	003b      	movs	r3, r7
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001070:	003b      	movs	r3, r7
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001076:	003b      	movs	r3, r7
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(LED_state_GPIO_Port, &GPIO_InitStruct);
 800107c:	003a      	movs	r2, r7
 800107e:	2390      	movs	r3, #144	@ 0x90
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	0011      	movs	r1, r2
 8001084:	0018      	movs	r0, r3
 8001086:	f000 fa70 	bl	800156a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEN_pallet_ctrl_Pin;
 800108a:	003b      	movs	r3, r7
 800108c:	2220      	movs	r2, #32
 800108e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001090:	003b      	movs	r3, r7
 8001092:	2201      	movs	r2, #1
 8001094:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001096:	003b      	movs	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800109c:	003b      	movs	r3, r7
 800109e:	2200      	movs	r2, #0
 80010a0:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010a2:	003b      	movs	r3, r7
 80010a4:	2200      	movs	r2, #0
 80010a6:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEN_pallet_ctrl_GPIO_Port, &GPIO_InitStruct);
 80010a8:	003a      	movs	r2, r7
 80010aa:	2390      	movs	r3, #144	@ 0x90
 80010ac:	05db      	lsls	r3, r3, #23
 80010ae:	0011      	movs	r1, r2
 80010b0:	0018      	movs	r0, r3
 80010b2:	f000 fa5a 	bl	800156a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Compr_ctrl_Pin;
 80010b6:	003b      	movs	r3, r7
 80010b8:	2240      	movs	r2, #64	@ 0x40
 80010ba:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010bc:	003b      	movs	r3, r7
 80010be:	2201      	movs	r2, #1
 80010c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010c2:	003b      	movs	r3, r7
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010c8:	003b      	movs	r3, r7
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010ce:	003b      	movs	r3, r7
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Compr_ctrl_GPIO_Port, &GPIO_InitStruct);
 80010d4:	003a      	movs	r2, r7
 80010d6:	2390      	movs	r3, #144	@ 0x90
 80010d8:	05db      	lsls	r3, r3, #23
 80010da:	0011      	movs	r1, r2
 80010dc:	0018      	movs	r0, r3
 80010de:	f000 fa44 	bl	800156a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEN_compr_ctrl_Pin;
 80010e2:	003b      	movs	r3, r7
 80010e4:	2280      	movs	r2, #128	@ 0x80
 80010e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80010e8:	003b      	movs	r3, r7
 80010ea:	2201      	movs	r2, #1
 80010ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80010ee:	003b      	movs	r3, r7
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80010f4:	003b      	movs	r3, r7
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80010fa:	003b      	movs	r3, r7
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(TEN_compr_ctrl_GPIO_Port, &GPIO_InitStruct);
 8001100:	003a      	movs	r2, r7
 8001102:	2390      	movs	r3, #144	@ 0x90
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	0011      	movs	r1, r2
 8001108:	0018      	movs	r0, r3
 800110a:	f000 fa2e 	bl	800156a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Compr_state_Pin;
 800110e:	003b      	movs	r3, r7
 8001110:	2280      	movs	r2, #128	@ 0x80
 8001112:	0092      	lsls	r2, r2, #2
 8001114:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001116:	003b      	movs	r3, r7
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800111c:	003b      	movs	r3, r7
 800111e:	2200      	movs	r2, #0
 8001120:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Compr_state_GPIO_Port, &GPIO_InitStruct);
 8001122:	003a      	movs	r2, r7
 8001124:	2390      	movs	r3, #144	@ 0x90
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	0011      	movs	r1, r2
 800112a:	0018      	movs	r0, r3
 800112c:	f000 fa1d 	bl	800156a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = Valve_state_Pin;
 8001130:	003b      	movs	r3, r7
 8001132:	2280      	movs	r2, #128	@ 0x80
 8001134:	00d2      	lsls	r2, r2, #3
 8001136:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001138:	003b      	movs	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800113e:	003b      	movs	r3, r7
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  LL_GPIO_Init(Valve_state_GPIO_Port, &GPIO_InitStruct);
 8001144:	003a      	movs	r2, r7
 8001146:	2390      	movs	r3, #144	@ 0x90
 8001148:	05db      	lsls	r3, r3, #23
 800114a:	0011      	movs	r1, r2
 800114c:	0018      	movs	r0, r3
 800114e:	f000 fa0c 	bl	800156a <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001152:	46c0      	nop			@ (mov r8, r8)
 8001154:	46bd      	mov	sp, r7
 8001156:	b006      	add	sp, #24
 8001158:	bd80      	pop	{r7, pc}

0800115a <LL_DMA_IsActiveFlag_TC1>:
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2202      	movs	r2, #2
 8001168:	4013      	ands	r3, r2
 800116a:	3b02      	subs	r3, #2
 800116c:	425a      	negs	r2, r3
 800116e:	4153      	adcs	r3, r2
 8001170:	b2db      	uxtb	r3, r3
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b002      	add	sp, #8
 8001178:	bd80      	pop	{r7, pc}

0800117a <LL_DMA_IsActiveFlag_TE1>:
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TEIF1) == (DMA_ISR_TEIF1));
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2208      	movs	r2, #8
 8001188:	4013      	ands	r3, r2
 800118a:	3b08      	subs	r3, #8
 800118c:	425a      	negs	r2, r3
 800118e:	4153      	adcs	r3, r2
 8001190:	b2db      	uxtb	r3, r3
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}

0800119a <LL_DMA_ClearFlag_TC1>:
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2202      	movs	r2, #2
 80011a6:	605a      	str	r2, [r3, #4]
}
 80011a8:	46c0      	nop			@ (mov r8, r8)
 80011aa:	46bd      	mov	sp, r7
 80011ac:	b002      	add	sp, #8
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <LL_DMA_ClearFlag_TE1>:
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTEIF1);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2208      	movs	r2, #8
 80011bc:	605a      	str	r2, [r3, #4]
}
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	46bd      	mov	sp, r7
 80011c2:	b002      	add	sp, #8
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ca:	46c0      	nop			@ (mov r8, r8)
 80011cc:	e7fd      	b.n	80011ca <NMI_Handler+0x4>

080011ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	e7fd      	b.n	80011d2 <HardFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80011da:	46c0      	nop			@ (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e4:	46c0      	nop			@ (mov r8, r8)
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}

080011ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	  if(LL_DMA_IsActiveFlag_TC1(DMA1) == 1)
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <DMA1_Channel1_IRQHandler+0x38>)
 80011fa:	0018      	movs	r0, r3
 80011fc:	f7ff ffad 	bl	800115a <LL_DMA_IsActiveFlag_TC1>
 8001200:	0003      	movs	r3, r0
 8001202:	2b01      	cmp	r3, #1
 8001204:	d103      	bne.n	800120e <DMA1_Channel1_IRQHandler+0x1a>
	  {
	    //ADC_DMA_TransferComplete_Callback();
	    LL_DMA_ClearFlag_TC1(DMA1);
 8001206:	4b09      	ldr	r3, [pc, #36]	@ (800122c <DMA1_Channel1_IRQHandler+0x38>)
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff ffc6 	bl	800119a <LL_DMA_ClearFlag_TC1>
	  }
	  if(LL_DMA_IsActiveFlag_TE1(DMA1) == 1)
 800120e:	4b07      	ldr	r3, [pc, #28]	@ (800122c <DMA1_Channel1_IRQHandler+0x38>)
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff ffb2 	bl	800117a <LL_DMA_IsActiveFlag_TE1>
 8001216:	0003      	movs	r3, r0
 8001218:	2b01      	cmp	r3, #1
 800121a:	d103      	bne.n	8001224 <DMA1_Channel1_IRQHandler+0x30>
	  {
	    LL_DMA_ClearFlag_TE1(DMA1);
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <DMA1_Channel1_IRQHandler+0x38>)
 800121e:	0018      	movs	r0, r3
 8001220:	f7ff ffc6 	bl	80011b0 <LL_DMA_ClearFlag_TE1>
  /* USER CODE END DMA1_Channel1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001224:	46c0      	nop			@ (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	40020000 	.word	0x40020000

08001230 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_IRQn 0 */
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001234:	46c0      	nop			@ (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001244:	4a14      	ldr	r2, [pc, #80]	@ (8001298 <_sbrk+0x5c>)
 8001246:	4b15      	ldr	r3, [pc, #84]	@ (800129c <_sbrk+0x60>)
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001250:	4b13      	ldr	r3, [pc, #76]	@ (80012a0 <_sbrk+0x64>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <_sbrk+0x64>)
 800125a:	4a12      	ldr	r2, [pc, #72]	@ (80012a4 <_sbrk+0x68>)
 800125c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800125e:	4b10      	ldr	r3, [pc, #64]	@ (80012a0 <_sbrk+0x64>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	429a      	cmp	r2, r3
 800126a:	d207      	bcs.n	800127c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800126c:	f000 fc4e 	bl	8001b0c <__errno>
 8001270:	0003      	movs	r3, r0
 8001272:	220c      	movs	r2, #12
 8001274:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001276:	2301      	movs	r3, #1
 8001278:	425b      	negs	r3, r3
 800127a:	e009      	b.n	8001290 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800127c:	4b08      	ldr	r3, [pc, #32]	@ (80012a0 <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001282:	4b07      	ldr	r3, [pc, #28]	@ (80012a0 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	18d2      	adds	r2, r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <_sbrk+0x64>)
 800128c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800128e:	68fb      	ldr	r3, [r7, #12]
}
 8001290:	0018      	movs	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	b006      	add	sp, #24
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20001000 	.word	0x20001000
 800129c:	00000400 	.word	0x00000400
 80012a0:	200000ac 	.word	0x200000ac
 80012a4:	200001f8 	.word	0x200001f8

080012a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012ac:	46c0      	nop			@ (mov r8, r8)
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012b4:	480d      	ldr	r0, [pc, #52]	@ (80012ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012b6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80012b8:	f7ff fff6 	bl	80012a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012bc:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80012be:	490d      	ldr	r1, [pc, #52]	@ (80012f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c0:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <LoopForever+0xe>)
  movs r3, #0
 80012c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012c4:	e002      	b.n	80012cc <LoopCopyDataInit>

080012c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ca:	3304      	adds	r3, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d0:	d3f9      	bcc.n	80012c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012d2:	4a0a      	ldr	r2, [pc, #40]	@ (80012fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80012d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001300 <LoopForever+0x16>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d8:	e001      	b.n	80012de <LoopFillZerobss>

080012da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012dc:	3204      	adds	r2, #4

080012de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e0:	d3fb      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e2:	f000 fc19 	bl	8001b18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012e6:	f7ff fc1d 	bl	8000b24 <main>

080012ea <LoopForever>:

LoopForever:
    b LoopForever
 80012ea:	e7fe      	b.n	80012ea <LoopForever>
  ldr   r0, =_estack
 80012ec:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80012f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f4:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 80012f8:	08002484 	.word	0x08002484
  ldr r2, =_sbss
 80012fc:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001300:	200001f8 	.word	0x200001f8

08001304 <DMA1_Channel2_3_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001304:	e7fe      	b.n	8001304 <DMA1_Channel2_3_IRQHandler>

08001306 <LL_ADC_IsEnabled>:
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	2201      	movs	r2, #1
 8001314:	4013      	ands	r3, r2
 8001316:	3b01      	subs	r3, #1
 8001318:	425a      	negs	r2, r3
 800131a:	4153      	adcs	r3, r2
 800131c:	b2db      	uxtb	r3, r3
}
 800131e:	0018      	movs	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	b002      	add	sp, #8
 8001324:	bd80      	pop	{r7, pc}
	...

08001328 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8001332:	230f      	movs	r3, #15
 8001334:	18fb      	adds	r3, r7, r3
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]
  assert_param(IS_LL_ADC_DATA_ALIGN(ADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));
  
  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ffe2 	bl	8001306 <LL_ADC_IsEnabled>
 8001342:	1e03      	subs	r3, r0, #0
 8001344:	d118      	bne.n	8001378 <LL_ADC_Init+0x50>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR1,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	4a11      	ldr	r2, [pc, #68]	@ (8001390 <LL_ADC_Init+0x68>)
 800134c:	401a      	ands	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	6859      	ldr	r1, [r3, #4]
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	4319      	orrs	r1, r3
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	430b      	orrs	r3, r1
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	60da      	str	r2, [r3, #12]
                 ADC_InitStruct->Resolution
               | ADC_InitStruct->DataAlignment
               | ADC_InitStruct->LowPowerMode
              );

    MODIFY_REG(ADCx->CFGR2,
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	089a      	lsrs	r2, r3, #2
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	431a      	orrs	r2, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	e003      	b.n	8001380 <LL_ADC_Init+0x58>
              );
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8001378:	230f      	movs	r3, #15
 800137a:	18fb      	adds	r3, r7, r3
 800137c:	2201      	movs	r2, #1
 800137e:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8001380:	230f      	movs	r3, #15
 8001382:	18fb      	adds	r3, r7, r3
 8001384:	781b      	ldrb	r3, [r3, #0]
}
 8001386:	0018      	movs	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	b004      	add	sp, #16
 800138c:	bd80      	pop	{r7, pc}
 800138e:	46c0      	nop			@ (mov r8, r8)
 8001390:	ffff3fc7 	.word	0xffff3fc7

08001394 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800139e:	230f      	movs	r3, #15
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	2200      	movs	r2, #0
 80013a4:	701a      	strb	r2, [r3, #0]
  assert_param((ADC_REG_InitStruct->ContinuousMode == LL_ADC_REG_CONV_SINGLE)
               || (ADC_REG_InitStruct->SequencerDiscont == LL_ADC_REG_SEQ_DISCONT_DISABLE));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if(LL_ADC_IsEnabled(ADCx) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	0018      	movs	r0, r3
 80013aa:	f7ff ffac 	bl	8001306 <LL_ADC_IsEnabled>
 80013ae:	1e03      	subs	r3, r0, #0
 80013b0:	d115      	bne.n	80013de <LL_ADC_REG_Init+0x4a>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    MODIFY_REG(ADCx->CFGR1,
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4a0f      	ldr	r2, [pc, #60]	@ (80013f4 <LL_ADC_REG_Init+0x60>)
 80013b8:	401a      	ands	r2, r3
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	4319      	orrs	r1, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	4319      	orrs	r1, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	4319      	orrs	r1, r3
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	691b      	ldr	r3, [r3, #16]
 80013d4:	430b      	orrs	r3, r1
 80013d6:	431a      	orrs	r2, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	e003      	b.n	80013e6 <LL_ADC_REG_Init+0x52>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80013de:	230f      	movs	r3, #15
 80013e0:	18fb      	adds	r3, r7, r3
 80013e2:	2201      	movs	r2, #1
 80013e4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80013e6:	230f      	movs	r3, #15
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	781b      	ldrb	r3, [r3, #0]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b004      	add	sp, #16
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	fffec23c 	.word	0xfffec23c

080013f8 <LL_GPIO_SetPinMode>:
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODER0), ((Pin * Pin) * Mode));
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	6819      	ldr	r1, [r3, #0]
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	435b      	muls	r3, r3
 800140c:	001a      	movs	r2, r3
 800140e:	0013      	movs	r3, r2
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	189b      	adds	r3, r3, r2
 8001414:	43db      	mvns	r3, r3
 8001416:	400b      	ands	r3, r1
 8001418:	001a      	movs	r2, r3
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	435b      	muls	r3, r3
 800141e:	6879      	ldr	r1, [r7, #4]
 8001420:	434b      	muls	r3, r1
 8001422:	431a      	orrs	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	46c0      	nop			@ (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bd80      	pop	{r7, pc}

08001430 <LL_GPIO_SetPinOutputType>:
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	43d2      	mvns	r2, r2
 8001444:	401a      	ands	r2, r3
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	6879      	ldr	r1, [r7, #4]
 800144a:	434b      	muls	r3, r1
 800144c:	431a      	orrs	r2, r3
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	605a      	str	r2, [r3, #4]
}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b004      	add	sp, #16
 8001458:	bd80      	pop	{r7, pc}

0800145a <LL_GPIO_SetPinSpeed>:
{
 800145a:	b580      	push	{r7, lr}
 800145c:	b084      	sub	sp, #16
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	60b9      	str	r1, [r7, #8]
 8001464:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEEDR0), ((Pin * Pin) * Speed));
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	435b      	muls	r3, r3
 800146e:	001a      	movs	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	189b      	adds	r3, r3, r2
 8001476:	43db      	mvns	r3, r3
 8001478:	400b      	ands	r3, r1
 800147a:	001a      	movs	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	435b      	muls	r3, r3
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	434b      	muls	r3, r1
 8001484:	431a      	orrs	r2, r3
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	609a      	str	r2, [r3, #8]
}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b004      	add	sp, #16
 8001490:	bd80      	pop	{r7, pc}

08001492 <LL_GPIO_SetPinPull>:
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	60f8      	str	r0, [r7, #12]
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPDR0), ((Pin * Pin) * Pull));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	68d9      	ldr	r1, [r3, #12]
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	435b      	muls	r3, r3
 80014a6:	001a      	movs	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	189b      	adds	r3, r3, r2
 80014ae:	43db      	mvns	r3, r3
 80014b0:	400b      	ands	r3, r1
 80014b2:	001a      	movs	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	435b      	muls	r3, r3
 80014b8:	6879      	ldr	r1, [r7, #4]
 80014ba:	434b      	muls	r3, r1
 80014bc:	431a      	orrs	r2, r3
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	60da      	str	r2, [r3, #12]
}
 80014c2:	46c0      	nop			@ (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b004      	add	sp, #16
 80014c8:	bd80      	pop	{r7, pc}

080014ca <LL_GPIO_SetAFPin_0_7>:
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b084      	sub	sp, #16
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6a19      	ldr	r1, [r3, #32]
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	435b      	muls	r3, r3
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	4353      	muls	r3, r2
 80014e2:	68ba      	ldr	r2, [r7, #8]
 80014e4:	435a      	muls	r2, r3
 80014e6:	0013      	movs	r3, r2
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	1a9b      	subs	r3, r3, r2
 80014ec:	43db      	mvns	r3, r3
 80014ee:	400b      	ands	r3, r1
 80014f0:	001a      	movs	r2, r3
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	435b      	muls	r3, r3
 80014f6:	68b9      	ldr	r1, [r7, #8]
 80014f8:	434b      	muls	r3, r1
 80014fa:	68b9      	ldr	r1, [r7, #8]
 80014fc:	434b      	muls	r3, r1
 80014fe:	6879      	ldr	r1, [r7, #4]
 8001500:	434b      	muls	r3, r1
 8001502:	431a      	orrs	r2, r3
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	621a      	str	r2, [r3, #32]
}
 8001508:	46c0      	nop			@ (mov r8, r8)
 800150a:	46bd      	mov	sp, r7
 800150c:	b004      	add	sp, #16
 800150e:	bd80      	pop	{r7, pc}

08001510 <LL_GPIO_SetAFPin_8_15>:
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001520:	68bb      	ldr	r3, [r7, #8]
 8001522:	0a1b      	lsrs	r3, r3, #8
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	0a12      	lsrs	r2, r2, #8
 8001528:	4353      	muls	r3, r2
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	0a12      	lsrs	r2, r2, #8
 800152e:	4353      	muls	r3, r2
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	0a12      	lsrs	r2, r2, #8
 8001534:	435a      	muls	r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	011b      	lsls	r3, r3, #4
 800153a:	1a9b      	subs	r3, r3, r2
 800153c:	43db      	mvns	r3, r3
 800153e:	400b      	ands	r3, r1
 8001540:	001a      	movs	r2, r3
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	68b9      	ldr	r1, [r7, #8]
 8001548:	0a09      	lsrs	r1, r1, #8
 800154a:	434b      	muls	r3, r1
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	0a09      	lsrs	r1, r1, #8
 8001550:	434b      	muls	r3, r1
 8001552:	68b9      	ldr	r1, [r7, #8]
 8001554:	0a09      	lsrs	r1, r1, #8
 8001556:	434b      	muls	r3, r1
 8001558:	6879      	ldr	r1, [r7, #4]
 800155a:	434b      	muls	r3, r1
 800155c:	431a      	orrs	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001562:	46c0      	nop			@ (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}

0800156a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b084      	sub	sp, #16
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001578:	e048      	b.n	800160c <LL_GPIO_Init+0xa2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2101      	movs	r1, #1
 8001580:	68fa      	ldr	r2, [r7, #12]
 8001582:	4091      	lsls	r1, r2
 8001584:	000a      	movs	r2, r1
 8001586:	4013      	ands	r3, r2
 8001588:	60bb      	str	r3, [r7, #8]

    if (currentpin != 0x00u)
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d03a      	beq.n	8001606 <LL_GPIO_Init+0x9c>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d003      	beq.n	80015a0 <LL_GPIO_Init+0x36>
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b02      	cmp	r3, #2
 800159e:	d10e      	bne.n	80015be <LL_GPIO_Init+0x54>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	689a      	ldr	r2, [r3, #8]
 80015a4:	68b9      	ldr	r1, [r7, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ff56 	bl	800145a <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	6819      	ldr	r1, [r3, #0]
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	0018      	movs	r0, r3
 80015ba:	f7ff ff39 	bl	8001430 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	691a      	ldr	r2, [r3, #16]
 80015c2:	68b9      	ldr	r1, [r7, #8]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff ff63 	bl	8001492 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d111      	bne.n	80015f8 <LL_GPIO_Init+0x8e>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	2bff      	cmp	r3, #255	@ 0xff
 80015d8:	d807      	bhi.n	80015ea <LL_GPIO_Init+0x80>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	68b9      	ldr	r1, [r7, #8]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff ff71 	bl	80014ca <LL_GPIO_SetAFPin_0_7>
 80015e8:	e006      	b.n	80015f8 <LL_GPIO_Init+0x8e>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	695a      	ldr	r2, [r3, #20]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	0018      	movs	r0, r3
 80015f4:	f7ff ff8c 	bl	8001510 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	68b9      	ldr	r1, [r7, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	0018      	movs	r0, r3
 8001602:	f7ff fef9 	bl	80013f8 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	3301      	adds	r3, #1
 800160a:	60fb      	str	r3, [r7, #12]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	40da      	lsrs	r2, r3
 8001614:	1e13      	subs	r3, r2, #0
 8001616:	d1b0      	bne.n	800157a <LL_GPIO_Init+0x10>
  }

  return (SUCCESS);
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b004      	add	sp, #16
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <LL_RCC_HSI_IsReady>:
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <LL_RCC_HSI_IsReady+0x1c>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	2202      	movs	r2, #2
 800162e:	4013      	ands	r3, r2
 8001630:	3b02      	subs	r3, #2
 8001632:	425a      	negs	r2, r3
 8001634:	4153      	adcs	r3, r2
 8001636:	b2db      	uxtb	r3, r3
}
 8001638:	0018      	movs	r0, r3
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	40021000 	.word	0x40021000

08001644 <LL_RCC_LSE_IsReady>:
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8001648:	4b05      	ldr	r3, [pc, #20]	@ (8001660 <LL_RCC_LSE_IsReady+0x1c>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	2202      	movs	r2, #2
 800164e:	4013      	ands	r3, r2
 8001650:	3b02      	subs	r3, #2
 8001652:	425a      	negs	r2, r3
 8001654:	4153      	adcs	r3, r2
 8001656:	b2db      	uxtb	r3, r3
}
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	46c0      	nop			@ (mov r8, r8)
 8001660:	40021000 	.word	0x40021000

08001664 <LL_RCC_GetSysClkSource>:
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001668:	4b03      	ldr	r3, [pc, #12]	@ (8001678 <LL_RCC_GetSysClkSource+0x14>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	220c      	movs	r2, #12
 800166e:	4013      	ands	r3, r2
}
 8001670:	0018      	movs	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			@ (mov r8, r8)
 8001678:	40021000 	.word	0x40021000

0800167c <LL_RCC_GetAHBPrescaler>:
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001680:	4b03      	ldr	r3, [pc, #12]	@ (8001690 <LL_RCC_GetAHBPrescaler+0x14>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	22f0      	movs	r2, #240	@ 0xf0
 8001686:	4013      	ands	r3, r2
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	46c0      	nop			@ (mov r8, r8)
 8001690:	40021000 	.word	0x40021000

08001694 <LL_RCC_GetAPB1Prescaler>:
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <LL_RCC_GetAPB1Prescaler+0x14>)
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	23e0      	movs	r3, #224	@ 0xe0
 800169e:	00db      	lsls	r3, r3, #3
 80016a0:	4013      	ands	r3, r2
}
 80016a2:	0018      	movs	r0, r3
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000

080016ac <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 80016b4:	4b06      	ldr	r3, [pc, #24]	@ (80016d0 <LL_RCC_GetUSARTClockSource+0x24>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b8:	2103      	movs	r1, #3
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	4313      	orrs	r3, r2
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b002      	add	sp, #8
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 80016d8:	4b03      	ldr	r3, [pc, #12]	@ (80016e8 <LL_RCC_PLL_GetMainSource+0x14>)
 80016da:	685a      	ldr	r2, [r3, #4]
 80016dc:	2380      	movs	r3, #128	@ 0x80
 80016de:	025b      	lsls	r3, r3, #9
 80016e0:	4013      	ands	r3, r2
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40021000 	.word	0x40021000

080016ec <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80016f0:	4b03      	ldr	r3, [pc, #12]	@ (8001700 <LL_RCC_PLL_GetMultiplicator+0x14>)
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	23f0      	movs	r3, #240	@ 0xf0
 80016f6:	039b      	lsls	r3, r3, #14
 80016f8:	4013      	ands	r3, r2
}
 80016fa:	0018      	movs	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40021000 	.word	0x40021000

08001704 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8001708:	4b03      	ldr	r3, [pc, #12]	@ (8001718 <LL_RCC_PLL_GetPrediv+0x14>)
 800170a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800170c:	220f      	movs	r2, #15
 800170e:	4013      	ands	r3, r2
}
 8001710:	0018      	movs	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	40021000 	.word	0x40021000

0800171c <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d130      	bne.n	8001790 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff ffbb 	bl	80016ac <LL_RCC_GetUSARTClockSource>
 8001736:	0003      	movs	r3, r0
 8001738:	2b03      	cmp	r3, #3
 800173a:	d00a      	beq.n	8001752 <LL_RCC_GetUSARTClockFreq+0x36>
 800173c:	d818      	bhi.n	8001770 <LL_RCC_GetUSARTClockFreq+0x54>
 800173e:	2b01      	cmp	r3, #1
 8001740:	d002      	beq.n	8001748 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001742:	2b02      	cmp	r3, #2
 8001744:	d00c      	beq.n	8001760 <LL_RCC_GetUSARTClockFreq+0x44>
 8001746:	e013      	b.n	8001770 <LL_RCC_GetUSARTClockFreq+0x54>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001748:	f000 f82a 	bl	80017a0 <RCC_GetSystemClockFreq>
 800174c:	0003      	movs	r3, r0
 800174e:	60fb      	str	r3, [r7, #12]
        break;
 8001750:	e01e      	b.n	8001790 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001752:	f7ff ff67 	bl	8001624 <LL_RCC_HSI_IsReady>
 8001756:	1e03      	subs	r3, r0, #0
 8001758:	d017      	beq.n	800178a <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800175a:	4b10      	ldr	r3, [pc, #64]	@ (800179c <LL_RCC_GetUSARTClockFreq+0x80>)
 800175c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800175e:	e014      	b.n	800178a <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001760:	f7ff ff70 	bl	8001644 <LL_RCC_LSE_IsReady>
 8001764:	1e03      	subs	r3, r0, #0
 8001766:	d012      	beq.n	800178e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8001768:	2380      	movs	r3, #128	@ 0x80
 800176a:	021b      	lsls	r3, r3, #8
 800176c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800176e:	e00e      	b.n	800178e <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001770:	f000 f816 	bl	80017a0 <RCC_GetSystemClockFreq>
 8001774:	0003      	movs	r3, r0
 8001776:	0018      	movs	r0, r3
 8001778:	f000 f838 	bl	80017ec <RCC_GetHCLKClockFreq>
 800177c:	0003      	movs	r3, r0
 800177e:	0018      	movs	r0, r3
 8001780:	f000 f84a 	bl	8001818 <RCC_GetPCLK1ClockFreq>
 8001784:	0003      	movs	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]
        break;
 8001788:	e002      	b.n	8001790 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	e000      	b.n	8001790 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800178e:	46c0      	nop			@ (mov r8, r8)
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001790:	68fb      	ldr	r3, [r7, #12]
}
 8001792:	0018      	movs	r0, r3
 8001794:	46bd      	mov	sp, r7
 8001796:	b004      	add	sp, #16
 8001798:	bd80      	pop	{r7, pc}
 800179a:	46c0      	nop			@ (mov r8, r8)
 800179c:	007a1200 	.word	0x007a1200

080017a0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80017aa:	f7ff ff5b 	bl	8001664 <LL_RCC_GetSysClkSource>
 80017ae:	0003      	movs	r3, r0
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d00b      	beq.n	80017cc <RCC_GetSystemClockFreq+0x2c>
 80017b4:	d80f      	bhi.n	80017d6 <RCC_GetSystemClockFreq+0x36>
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d002      	beq.n	80017c0 <RCC_GetSystemClockFreq+0x20>
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d003      	beq.n	80017c6 <RCC_GetSystemClockFreq+0x26>
 80017be:	e00a      	b.n	80017d6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80017c0:	4b09      	ldr	r3, [pc, #36]	@ (80017e8 <RCC_GetSystemClockFreq+0x48>)
 80017c2:	607b      	str	r3, [r7, #4]
      break;
 80017c4:	e00a      	b.n	80017dc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80017c6:	4b08      	ldr	r3, [pc, #32]	@ (80017e8 <RCC_GetSystemClockFreq+0x48>)
 80017c8:	607b      	str	r3, [r7, #4]
      break;
 80017ca:	e007      	b.n	80017dc <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80017cc:	f000 f838 	bl	8001840 <RCC_PLL_GetFreqDomain_SYS>
 80017d0:	0003      	movs	r3, r0
 80017d2:	607b      	str	r3, [r7, #4]
      break;
 80017d4:	e002      	b.n	80017dc <RCC_GetSystemClockFreq+0x3c>
      frequency = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80017d6:	4b04      	ldr	r3, [pc, #16]	@ (80017e8 <RCC_GetSystemClockFreq+0x48>)
 80017d8:	607b      	str	r3, [r7, #4]
      break;
 80017da:	46c0      	nop			@ (mov r8, r8)
  }

  return frequency;
 80017dc:	687b      	ldr	r3, [r7, #4]
}
 80017de:	0018      	movs	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	b002      	add	sp, #8
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	46c0      	nop			@ (mov r8, r8)
 80017e8:	007a1200 	.word	0x007a1200

080017ec <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80017f4:	f7ff ff42 	bl	800167c <LL_RCC_GetAHBPrescaler>
 80017f8:	0003      	movs	r3, r0
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	220f      	movs	r2, #15
 80017fe:	4013      	ands	r3, r2
 8001800:	4a04      	ldr	r2, [pc, #16]	@ (8001814 <RCC_GetHCLKClockFreq+0x28>)
 8001802:	5cd3      	ldrb	r3, [r2, r3]
 8001804:	001a      	movs	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	40d3      	lsrs	r3, r2
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}
 8001812:	46c0      	nop			@ (mov r8, r8)
 8001814:	08002430 	.word	0x08002430

08001818 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001820:	f7ff ff38 	bl	8001694 <LL_RCC_GetAPB1Prescaler>
 8001824:	0003      	movs	r3, r0
 8001826:	0a1b      	lsrs	r3, r3, #8
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <RCC_GetPCLK1ClockFreq+0x24>)
 800182a:	5cd3      	ldrb	r3, [r2, r3]
 800182c:	001a      	movs	r2, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	40d3      	lsrs	r3, r2
}
 8001832:	0018      	movs	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	b002      	add	sp, #8
 8001838:	bd80      	pop	{r7, pc}
 800183a:	46c0      	nop			@ (mov r8, r8)
 800183c:	08002440 	.word	0x08002440

08001840 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	2300      	movs	r3, #0
 800184c:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 800184e:	f7ff ff41 	bl	80016d4 <LL_RCC_PLL_GetMainSource>
 8001852:	0003      	movs	r3, r0
 8001854:	603b      	str	r3, [r7, #0]

  switch (pllsource)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <RCC_PLL_GetFreqDomain_SYS+0x28>
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	025b      	lsls	r3, r3, #9
 8001862:	429a      	cmp	r2, r3
 8001864:	d003      	beq.n	800186e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8001866:	e005      	b.n	8001874 <RCC_PLL_GetFreqDomain_SYS+0x34>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001868:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 800186a:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800186c:	e005      	b.n	800187a <RCC_PLL_GetFreqDomain_SYS+0x3a>
      pllinputfreq = HSI48_VALUE;
      break;
#endif /* RCC_HSI48_SUPPORT */

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800186e:	4b0f      	ldr	r3, [pc, #60]	@ (80018ac <RCC_PLL_GetFreqDomain_SYS+0x6c>)
 8001870:	607b      	str	r3, [r7, #4]
      break;
 8001872:	e002      	b.n	800187a <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <RCC_PLL_GetFreqDomain_SYS+0x68>)
 8001876:	607b      	str	r3, [r7, #4]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001878:	46c0      	nop			@ (mov r8, r8)
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800187a:	f7ff ff43 	bl	8001704 <LL_RCC_PLL_GetPrediv>
 800187e:	0003      	movs	r3, r0
 8001880:	3301      	adds	r3, #1
 8001882:	0019      	movs	r1, r3
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f7fe fc49 	bl	800011c <__udivsi3>
 800188a:	0003      	movs	r3, r0
 800188c:	001c      	movs	r4, r3
 800188e:	f7ff ff2d 	bl	80016ec <LL_RCC_PLL_GetMultiplicator>
 8001892:	0003      	movs	r3, r0
 8001894:	0c9b      	lsrs	r3, r3, #18
 8001896:	220f      	movs	r2, #15
 8001898:	4013      	ands	r3, r2
 800189a:	3302      	adds	r3, #2
 800189c:	4363      	muls	r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 800189e:	0018      	movs	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b003      	add	sp, #12
 80018a4:	bd90      	pop	{r4, r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	003d0900 	.word	0x003d0900
 80018ac:	007a1200 	.word	0x007a1200

080018b0 <LL_USART_IsEnabled>:
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	2201      	movs	r2, #1
 80018be:	4013      	ands	r3, r2
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <LL_USART_IsEnabled+0x18>
 80018c4:	2301      	movs	r3, #1
 80018c6:	e000      	b.n	80018ca <LL_USART_IsEnabled+0x1a>
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	0018      	movs	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	b002      	add	sp, #8
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <LL_USART_SetStopBitsLength>:
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4a05      	ldr	r2, [pc, #20]	@ (80018f8 <LL_USART_SetStopBitsLength+0x24>)
 80018e4:	401a      	ands	r2, r3
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	605a      	str	r2, [r3, #4]
}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	46bd      	mov	sp, r7
 80018f2:	b002      	add	sp, #8
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	46c0      	nop			@ (mov r8, r8)
 80018f8:	ffffcfff 	.word	0xffffcfff

080018fc <LL_USART_SetHWFlowCtrl>:
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	4a05      	ldr	r2, [pc, #20]	@ (8001920 <LL_USART_SetHWFlowCtrl+0x24>)
 800190c:	401a      	ands	r2, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	431a      	orrs	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]
}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	46bd      	mov	sp, r7
 800191a:	b002      	add	sp, #8
 800191c:	bd80      	pop	{r7, pc}
 800191e:	46c0      	nop			@ (mov r8, r8)
 8001920:	fffffcff 	.word	0xfffffcff

08001924 <LL_USART_SetBaudRate>:
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	2380      	movs	r3, #128	@ 0x80
 8001936:	021b      	lsls	r3, r3, #8
 8001938:	429a      	cmp	r2, r3
 800193a:	d11c      	bne.n	8001976 <LL_USART_SetBaudRate+0x52>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	005a      	lsls	r2, r3, #1
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	085b      	lsrs	r3, r3, #1
 8001944:	18d3      	adds	r3, r2, r3
 8001946:	6839      	ldr	r1, [r7, #0]
 8001948:	0018      	movs	r0, r3
 800194a:	f7fe fbe7 	bl	800011c <__udivsi3>
 800194e:	0003      	movs	r3, r0
 8001950:	b29b      	uxth	r3, r3
 8001952:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <LL_USART_SetBaudRate+0x74>)
 8001958:	4013      	ands	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	085b      	lsrs	r3, r3, #1
 8001960:	b29b      	uxth	r3, r3
 8001962:	001a      	movs	r2, r3
 8001964:	2307      	movs	r3, #7
 8001966:	4013      	ands	r3, r2
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	e00c      	b.n	8001990 <LL_USART_SetBaudRate+0x6c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	085a      	lsrs	r2, r3, #1
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	18d3      	adds	r3, r2, r3
 800197e:	6839      	ldr	r1, [r7, #0]
 8001980:	0018      	movs	r0, r3
 8001982:	f7fe fbcb 	bl	800011c <__udivsi3>
 8001986:	0003      	movs	r3, r0
 8001988:	b29b      	uxth	r3, r3
 800198a:	001a      	movs	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	60da      	str	r2, [r3, #12]
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b006      	add	sp, #24
 8001996:	bd80      	pop	{r7, pc}
 8001998:	0000fff0 	.word	0x0000fff0

0800199c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80019a6:	230f      	movs	r3, #15
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	2201      	movs	r2, #1
 80019ac:	701a      	strb	r2, [r3, #0]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	0018      	movs	r0, r3
 80019b6:	f7ff ff7b 	bl	80018b0 <LL_USART_IsEnabled>
 80019ba:	1e03      	subs	r3, r0, #0
 80019bc:	d13b      	bne.n	8001a36 <LL_USART_Init+0x9a>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a20      	ldr	r2, [pc, #128]	@ (8001a44 <LL_USART_Init+0xa8>)
 80019c4:	401a      	ands	r2, r3
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	4319      	orrs	r1, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	691b      	ldr	r3, [r3, #16]
 80019d4:	4319      	orrs	r1, r3
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	430b      	orrs	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	689a      	ldr	r2, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	0011      	movs	r1, r2
 80019ea:	0018      	movs	r0, r3
 80019ec:	f7ff ff72 	bl	80018d4 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	695a      	ldr	r2, [r3, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff ff7f 	bl	80018fc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <LL_USART_Init+0xac>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d104      	bne.n	8001a10 <LL_USART_Init+0x74>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001a06:	2000      	movs	r0, #0
 8001a08:	f7ff fe88 	bl	800171c <LL_RCC_GetUSARTClockFreq>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	60bb      	str	r3, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00f      	beq.n	8001a36 <LL_USART_Init+0x9a>
        && (USART_InitStruct->BaudRate != 0U))
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <LL_USART_Init+0x9a>
    {
      status = SUCCESS;
 8001a1e:	230f      	movs	r3, #15
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001a2e:	68b9      	ldr	r1, [r7, #8]
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff77 	bl	8001924 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001a36:	230f      	movs	r3, #15
 8001a38:	18fb      	adds	r3, r7, r3
 8001a3a:	781b      	ldrb	r3, [r3, #0]
}
 8001a3c:	0018      	movs	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	b004      	add	sp, #16
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	ffff69f3 	.word	0xffff69f3
 8001a48:	40013800 	.word	0x40013800

08001a4c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001a56:	6839      	ldr	r1, [r7, #0]
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe fb5f 	bl	800011c <__udivsi3>
 8001a5e:	0003      	movs	r3, r0
 8001a60:	001a      	movs	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <LL_InitTick+0x30>)
 8001a64:	3a01      	subs	r2, #1
 8001a66:	605a      	str	r2, [r3, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <LL_InitTick+0x30>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a6e:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <LL_InitTick+0x30>)
 8001a70:	2205      	movs	r2, #5
 8001a72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001a74:	46c0      	nop			@ (mov r8, r8)
 8001a76:	46bd      	mov	sp, r7
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	e000e010 	.word	0xe000e010

08001a80 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001a88:	23fa      	movs	r3, #250	@ 0xfa
 8001a8a:	009a      	lsls	r2, r3, #2
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	0011      	movs	r1, r2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff ffdb 	bl	8001a4c <LL_InitTick>
}
 8001a96:	46c0      	nop			@ (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b002      	add	sp, #8
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001aa8:	4b03      	ldr	r3, [pc, #12]	@ (8001ab8 <LL_SetSystemCoreClock+0x18>)
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	601a      	str	r2, [r3, #0]
}
 8001aae:	46c0      	nop			@ (mov r8, r8)
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	b002      	add	sp, #8
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			@ (mov r8, r8)
 8001ab8:	20000000 	.word	0x20000000

08001abc <siprintf>:
 8001abc:	b40e      	push	{r1, r2, r3}
 8001abe:	b500      	push	{lr}
 8001ac0:	490b      	ldr	r1, [pc, #44]	@ (8001af0 <siprintf+0x34>)
 8001ac2:	b09c      	sub	sp, #112	@ 0x70
 8001ac4:	ab1d      	add	r3, sp, #116	@ 0x74
 8001ac6:	9002      	str	r0, [sp, #8]
 8001ac8:	9006      	str	r0, [sp, #24]
 8001aca:	9107      	str	r1, [sp, #28]
 8001acc:	9104      	str	r1, [sp, #16]
 8001ace:	4809      	ldr	r0, [pc, #36]	@ (8001af4 <siprintf+0x38>)
 8001ad0:	4909      	ldr	r1, [pc, #36]	@ (8001af8 <siprintf+0x3c>)
 8001ad2:	cb04      	ldmia	r3!, {r2}
 8001ad4:	9105      	str	r1, [sp, #20]
 8001ad6:	6800      	ldr	r0, [r0, #0]
 8001ad8:	a902      	add	r1, sp, #8
 8001ada:	9301      	str	r3, [sp, #4]
 8001adc:	f000 f99e 	bl	8001e1c <_svfiprintf_r>
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	9b02      	ldr	r3, [sp, #8]
 8001ae4:	701a      	strb	r2, [r3, #0]
 8001ae6:	b01c      	add	sp, #112	@ 0x70
 8001ae8:	bc08      	pop	{r3}
 8001aea:	b003      	add	sp, #12
 8001aec:	4718      	bx	r3
 8001aee:	46c0      	nop			@ (mov r8, r8)
 8001af0:	7fffffff 	.word	0x7fffffff
 8001af4:	20000004 	.word	0x20000004
 8001af8:	ffff0208 	.word	0xffff0208

08001afc <memset>:
 8001afc:	0003      	movs	r3, r0
 8001afe:	1882      	adds	r2, r0, r2
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d100      	bne.n	8001b06 <memset+0xa>
 8001b04:	4770      	bx	lr
 8001b06:	7019      	strb	r1, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	e7f9      	b.n	8001b00 <memset+0x4>

08001b0c <__errno>:
 8001b0c:	4b01      	ldr	r3, [pc, #4]	@ (8001b14 <__errno+0x8>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	4770      	bx	lr
 8001b12:	46c0      	nop			@ (mov r8, r8)
 8001b14:	20000004 	.word	0x20000004

08001b18 <__libc_init_array>:
 8001b18:	b570      	push	{r4, r5, r6, lr}
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	4c0c      	ldr	r4, [pc, #48]	@ (8001b50 <__libc_init_array+0x38>)
 8001b1e:	4d0d      	ldr	r5, [pc, #52]	@ (8001b54 <__libc_init_array+0x3c>)
 8001b20:	1b64      	subs	r4, r4, r5
 8001b22:	10a4      	asrs	r4, r4, #2
 8001b24:	42a6      	cmp	r6, r4
 8001b26:	d109      	bne.n	8001b3c <__libc_init_array+0x24>
 8001b28:	2600      	movs	r6, #0
 8001b2a:	f000 fc65 	bl	80023f8 <_init>
 8001b2e:	4c0a      	ldr	r4, [pc, #40]	@ (8001b58 <__libc_init_array+0x40>)
 8001b30:	4d0a      	ldr	r5, [pc, #40]	@ (8001b5c <__libc_init_array+0x44>)
 8001b32:	1b64      	subs	r4, r4, r5
 8001b34:	10a4      	asrs	r4, r4, #2
 8001b36:	42a6      	cmp	r6, r4
 8001b38:	d105      	bne.n	8001b46 <__libc_init_array+0x2e>
 8001b3a:	bd70      	pop	{r4, r5, r6, pc}
 8001b3c:	00b3      	lsls	r3, r6, #2
 8001b3e:	58eb      	ldr	r3, [r5, r3]
 8001b40:	4798      	blx	r3
 8001b42:	3601      	adds	r6, #1
 8001b44:	e7ee      	b.n	8001b24 <__libc_init_array+0xc>
 8001b46:	00b3      	lsls	r3, r6, #2
 8001b48:	58eb      	ldr	r3, [r5, r3]
 8001b4a:	4798      	blx	r3
 8001b4c:	3601      	adds	r6, #1
 8001b4e:	e7f2      	b.n	8001b36 <__libc_init_array+0x1e>
 8001b50:	0800247c 	.word	0x0800247c
 8001b54:	0800247c 	.word	0x0800247c
 8001b58:	08002480 	.word	0x08002480
 8001b5c:	0800247c 	.word	0x0800247c

08001b60 <__retarget_lock_acquire_recursive>:
 8001b60:	4770      	bx	lr

08001b62 <__retarget_lock_release_recursive>:
 8001b62:	4770      	bx	lr

08001b64 <_free_r>:
 8001b64:	b570      	push	{r4, r5, r6, lr}
 8001b66:	0005      	movs	r5, r0
 8001b68:	1e0c      	subs	r4, r1, #0
 8001b6a:	d010      	beq.n	8001b8e <_free_r+0x2a>
 8001b6c:	3c04      	subs	r4, #4
 8001b6e:	6823      	ldr	r3, [r4, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	da00      	bge.n	8001b76 <_free_r+0x12>
 8001b74:	18e4      	adds	r4, r4, r3
 8001b76:	0028      	movs	r0, r5
 8001b78:	f000 f8e0 	bl	8001d3c <__malloc_lock>
 8001b7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf4 <_free_r+0x90>)
 8001b7e:	6813      	ldr	r3, [r2, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <_free_r+0x2c>
 8001b84:	6063      	str	r3, [r4, #4]
 8001b86:	6014      	str	r4, [r2, #0]
 8001b88:	0028      	movs	r0, r5
 8001b8a:	f000 f8df 	bl	8001d4c <__malloc_unlock>
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
 8001b90:	42a3      	cmp	r3, r4
 8001b92:	d908      	bls.n	8001ba6 <_free_r+0x42>
 8001b94:	6820      	ldr	r0, [r4, #0]
 8001b96:	1821      	adds	r1, r4, r0
 8001b98:	428b      	cmp	r3, r1
 8001b9a:	d1f3      	bne.n	8001b84 <_free_r+0x20>
 8001b9c:	6819      	ldr	r1, [r3, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	1809      	adds	r1, r1, r0
 8001ba2:	6021      	str	r1, [r4, #0]
 8001ba4:	e7ee      	b.n	8001b84 <_free_r+0x20>
 8001ba6:	001a      	movs	r2, r3
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <_free_r+0x4e>
 8001bae:	42a3      	cmp	r3, r4
 8001bb0:	d9f9      	bls.n	8001ba6 <_free_r+0x42>
 8001bb2:	6811      	ldr	r1, [r2, #0]
 8001bb4:	1850      	adds	r0, r2, r1
 8001bb6:	42a0      	cmp	r0, r4
 8001bb8:	d10b      	bne.n	8001bd2 <_free_r+0x6e>
 8001bba:	6820      	ldr	r0, [r4, #0]
 8001bbc:	1809      	adds	r1, r1, r0
 8001bbe:	1850      	adds	r0, r2, r1
 8001bc0:	6011      	str	r1, [r2, #0]
 8001bc2:	4283      	cmp	r3, r0
 8001bc4:	d1e0      	bne.n	8001b88 <_free_r+0x24>
 8001bc6:	6818      	ldr	r0, [r3, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	1841      	adds	r1, r0, r1
 8001bcc:	6011      	str	r1, [r2, #0]
 8001bce:	6053      	str	r3, [r2, #4]
 8001bd0:	e7da      	b.n	8001b88 <_free_r+0x24>
 8001bd2:	42a0      	cmp	r0, r4
 8001bd4:	d902      	bls.n	8001bdc <_free_r+0x78>
 8001bd6:	230c      	movs	r3, #12
 8001bd8:	602b      	str	r3, [r5, #0]
 8001bda:	e7d5      	b.n	8001b88 <_free_r+0x24>
 8001bdc:	6820      	ldr	r0, [r4, #0]
 8001bde:	1821      	adds	r1, r4, r0
 8001be0:	428b      	cmp	r3, r1
 8001be2:	d103      	bne.n	8001bec <_free_r+0x88>
 8001be4:	6819      	ldr	r1, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	1809      	adds	r1, r1, r0
 8001bea:	6021      	str	r1, [r4, #0]
 8001bec:	6063      	str	r3, [r4, #4]
 8001bee:	6054      	str	r4, [r2, #4]
 8001bf0:	e7ca      	b.n	8001b88 <_free_r+0x24>
 8001bf2:	46c0      	nop			@ (mov r8, r8)
 8001bf4:	200001f4 	.word	0x200001f4

08001bf8 <sbrk_aligned>:
 8001bf8:	b570      	push	{r4, r5, r6, lr}
 8001bfa:	4e0f      	ldr	r6, [pc, #60]	@ (8001c38 <sbrk_aligned+0x40>)
 8001bfc:	000d      	movs	r5, r1
 8001bfe:	6831      	ldr	r1, [r6, #0]
 8001c00:	0004      	movs	r4, r0
 8001c02:	2900      	cmp	r1, #0
 8001c04:	d102      	bne.n	8001c0c <sbrk_aligned+0x14>
 8001c06:	f000 fb99 	bl	800233c <_sbrk_r>
 8001c0a:	6030      	str	r0, [r6, #0]
 8001c0c:	0029      	movs	r1, r5
 8001c0e:	0020      	movs	r0, r4
 8001c10:	f000 fb94 	bl	800233c <_sbrk_r>
 8001c14:	1c43      	adds	r3, r0, #1
 8001c16:	d103      	bne.n	8001c20 <sbrk_aligned+0x28>
 8001c18:	2501      	movs	r5, #1
 8001c1a:	426d      	negs	r5, r5
 8001c1c:	0028      	movs	r0, r5
 8001c1e:	bd70      	pop	{r4, r5, r6, pc}
 8001c20:	2303      	movs	r3, #3
 8001c22:	1cc5      	adds	r5, r0, #3
 8001c24:	439d      	bics	r5, r3
 8001c26:	42a8      	cmp	r0, r5
 8001c28:	d0f8      	beq.n	8001c1c <sbrk_aligned+0x24>
 8001c2a:	1a29      	subs	r1, r5, r0
 8001c2c:	0020      	movs	r0, r4
 8001c2e:	f000 fb85 	bl	800233c <_sbrk_r>
 8001c32:	3001      	adds	r0, #1
 8001c34:	d1f2      	bne.n	8001c1c <sbrk_aligned+0x24>
 8001c36:	e7ef      	b.n	8001c18 <sbrk_aligned+0x20>
 8001c38:	200001f0 	.word	0x200001f0

08001c3c <_malloc_r>:
 8001c3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c3e:	2203      	movs	r2, #3
 8001c40:	1ccb      	adds	r3, r1, #3
 8001c42:	4393      	bics	r3, r2
 8001c44:	3308      	adds	r3, #8
 8001c46:	0005      	movs	r5, r0
 8001c48:	001f      	movs	r7, r3
 8001c4a:	2b0c      	cmp	r3, #12
 8001c4c:	d234      	bcs.n	8001cb8 <_malloc_r+0x7c>
 8001c4e:	270c      	movs	r7, #12
 8001c50:	42b9      	cmp	r1, r7
 8001c52:	d833      	bhi.n	8001cbc <_malloc_r+0x80>
 8001c54:	0028      	movs	r0, r5
 8001c56:	f000 f871 	bl	8001d3c <__malloc_lock>
 8001c5a:	4e37      	ldr	r6, [pc, #220]	@ (8001d38 <_malloc_r+0xfc>)
 8001c5c:	6833      	ldr	r3, [r6, #0]
 8001c5e:	001c      	movs	r4, r3
 8001c60:	2c00      	cmp	r4, #0
 8001c62:	d12f      	bne.n	8001cc4 <_malloc_r+0x88>
 8001c64:	0039      	movs	r1, r7
 8001c66:	0028      	movs	r0, r5
 8001c68:	f7ff ffc6 	bl	8001bf8 <sbrk_aligned>
 8001c6c:	0004      	movs	r4, r0
 8001c6e:	1c43      	adds	r3, r0, #1
 8001c70:	d15f      	bne.n	8001d32 <_malloc_r+0xf6>
 8001c72:	6834      	ldr	r4, [r6, #0]
 8001c74:	9400      	str	r4, [sp, #0]
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d14a      	bne.n	8001d12 <_malloc_r+0xd6>
 8001c7c:	2c00      	cmp	r4, #0
 8001c7e:	d052      	beq.n	8001d26 <_malloc_r+0xea>
 8001c80:	6823      	ldr	r3, [r4, #0]
 8001c82:	0028      	movs	r0, r5
 8001c84:	18e3      	adds	r3, r4, r3
 8001c86:	9900      	ldr	r1, [sp, #0]
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	f000 fb57 	bl	800233c <_sbrk_r>
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	4283      	cmp	r3, r0
 8001c92:	d148      	bne.n	8001d26 <_malloc_r+0xea>
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	0028      	movs	r0, r5
 8001c98:	1aff      	subs	r7, r7, r3
 8001c9a:	0039      	movs	r1, r7
 8001c9c:	f7ff ffac 	bl	8001bf8 <sbrk_aligned>
 8001ca0:	3001      	adds	r0, #1
 8001ca2:	d040      	beq.n	8001d26 <_malloc_r+0xea>
 8001ca4:	6823      	ldr	r3, [r4, #0]
 8001ca6:	19db      	adds	r3, r3, r7
 8001ca8:	6023      	str	r3, [r4, #0]
 8001caa:	6833      	ldr	r3, [r6, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	2a00      	cmp	r2, #0
 8001cb0:	d133      	bne.n	8001d1a <_malloc_r+0xde>
 8001cb2:	9b00      	ldr	r3, [sp, #0]
 8001cb4:	6033      	str	r3, [r6, #0]
 8001cb6:	e019      	b.n	8001cec <_malloc_r+0xb0>
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	dac9      	bge.n	8001c50 <_malloc_r+0x14>
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	602b      	str	r3, [r5, #0]
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001cc4:	6821      	ldr	r1, [r4, #0]
 8001cc6:	1bc9      	subs	r1, r1, r7
 8001cc8:	d420      	bmi.n	8001d0c <_malloc_r+0xd0>
 8001cca:	290b      	cmp	r1, #11
 8001ccc:	d90a      	bls.n	8001ce4 <_malloc_r+0xa8>
 8001cce:	19e2      	adds	r2, r4, r7
 8001cd0:	6027      	str	r7, [r4, #0]
 8001cd2:	42a3      	cmp	r3, r4
 8001cd4:	d104      	bne.n	8001ce0 <_malloc_r+0xa4>
 8001cd6:	6032      	str	r2, [r6, #0]
 8001cd8:	6863      	ldr	r3, [r4, #4]
 8001cda:	6011      	str	r1, [r2, #0]
 8001cdc:	6053      	str	r3, [r2, #4]
 8001cde:	e005      	b.n	8001cec <_malloc_r+0xb0>
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	e7f9      	b.n	8001cd8 <_malloc_r+0x9c>
 8001ce4:	6862      	ldr	r2, [r4, #4]
 8001ce6:	42a3      	cmp	r3, r4
 8001ce8:	d10e      	bne.n	8001d08 <_malloc_r+0xcc>
 8001cea:	6032      	str	r2, [r6, #0]
 8001cec:	0028      	movs	r0, r5
 8001cee:	f000 f82d 	bl	8001d4c <__malloc_unlock>
 8001cf2:	0020      	movs	r0, r4
 8001cf4:	2207      	movs	r2, #7
 8001cf6:	300b      	adds	r0, #11
 8001cf8:	1d23      	adds	r3, r4, #4
 8001cfa:	4390      	bics	r0, r2
 8001cfc:	1ac2      	subs	r2, r0, r3
 8001cfe:	4298      	cmp	r0, r3
 8001d00:	d0df      	beq.n	8001cc2 <_malloc_r+0x86>
 8001d02:	1a1b      	subs	r3, r3, r0
 8001d04:	50a3      	str	r3, [r4, r2]
 8001d06:	e7dc      	b.n	8001cc2 <_malloc_r+0x86>
 8001d08:	605a      	str	r2, [r3, #4]
 8001d0a:	e7ef      	b.n	8001cec <_malloc_r+0xb0>
 8001d0c:	0023      	movs	r3, r4
 8001d0e:	6864      	ldr	r4, [r4, #4]
 8001d10:	e7a6      	b.n	8001c60 <_malloc_r+0x24>
 8001d12:	9c00      	ldr	r4, [sp, #0]
 8001d14:	6863      	ldr	r3, [r4, #4]
 8001d16:	9300      	str	r3, [sp, #0]
 8001d18:	e7ad      	b.n	8001c76 <_malloc_r+0x3a>
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	42a3      	cmp	r3, r4
 8001d20:	d1fb      	bne.n	8001d1a <_malloc_r+0xde>
 8001d22:	2300      	movs	r3, #0
 8001d24:	e7da      	b.n	8001cdc <_malloc_r+0xa0>
 8001d26:	230c      	movs	r3, #12
 8001d28:	0028      	movs	r0, r5
 8001d2a:	602b      	str	r3, [r5, #0]
 8001d2c:	f000 f80e 	bl	8001d4c <__malloc_unlock>
 8001d30:	e7c6      	b.n	8001cc0 <_malloc_r+0x84>
 8001d32:	6007      	str	r7, [r0, #0]
 8001d34:	e7da      	b.n	8001cec <_malloc_r+0xb0>
 8001d36:	46c0      	nop			@ (mov r8, r8)
 8001d38:	200001f4 	.word	0x200001f4

08001d3c <__malloc_lock>:
 8001d3c:	b510      	push	{r4, lr}
 8001d3e:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <__malloc_lock+0xc>)
 8001d40:	f7ff ff0e 	bl	8001b60 <__retarget_lock_acquire_recursive>
 8001d44:	bd10      	pop	{r4, pc}
 8001d46:	46c0      	nop			@ (mov r8, r8)
 8001d48:	200001ec 	.word	0x200001ec

08001d4c <__malloc_unlock>:
 8001d4c:	b510      	push	{r4, lr}
 8001d4e:	4802      	ldr	r0, [pc, #8]	@ (8001d58 <__malloc_unlock+0xc>)
 8001d50:	f7ff ff07 	bl	8001b62 <__retarget_lock_release_recursive>
 8001d54:	bd10      	pop	{r4, pc}
 8001d56:	46c0      	nop			@ (mov r8, r8)
 8001d58:	200001ec 	.word	0x200001ec

08001d5c <__ssputs_r>:
 8001d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d5e:	688e      	ldr	r6, [r1, #8]
 8001d60:	b085      	sub	sp, #20
 8001d62:	001f      	movs	r7, r3
 8001d64:	000c      	movs	r4, r1
 8001d66:	680b      	ldr	r3, [r1, #0]
 8001d68:	9002      	str	r0, [sp, #8]
 8001d6a:	9203      	str	r2, [sp, #12]
 8001d6c:	42be      	cmp	r6, r7
 8001d6e:	d830      	bhi.n	8001dd2 <__ssputs_r+0x76>
 8001d70:	210c      	movs	r1, #12
 8001d72:	5e62      	ldrsh	r2, [r4, r1]
 8001d74:	2190      	movs	r1, #144	@ 0x90
 8001d76:	00c9      	lsls	r1, r1, #3
 8001d78:	420a      	tst	r2, r1
 8001d7a:	d028      	beq.n	8001dce <__ssputs_r+0x72>
 8001d7c:	2003      	movs	r0, #3
 8001d7e:	6921      	ldr	r1, [r4, #16]
 8001d80:	1a5b      	subs	r3, r3, r1
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	6963      	ldr	r3, [r4, #20]
 8001d86:	4343      	muls	r3, r0
 8001d88:	9801      	ldr	r0, [sp, #4]
 8001d8a:	0fdd      	lsrs	r5, r3, #31
 8001d8c:	18ed      	adds	r5, r5, r3
 8001d8e:	1c7b      	adds	r3, r7, #1
 8001d90:	181b      	adds	r3, r3, r0
 8001d92:	106d      	asrs	r5, r5, #1
 8001d94:	42ab      	cmp	r3, r5
 8001d96:	d900      	bls.n	8001d9a <__ssputs_r+0x3e>
 8001d98:	001d      	movs	r5, r3
 8001d9a:	0552      	lsls	r2, r2, #21
 8001d9c:	d528      	bpl.n	8001df0 <__ssputs_r+0x94>
 8001d9e:	0029      	movs	r1, r5
 8001da0:	9802      	ldr	r0, [sp, #8]
 8001da2:	f7ff ff4b 	bl	8001c3c <_malloc_r>
 8001da6:	1e06      	subs	r6, r0, #0
 8001da8:	d02c      	beq.n	8001e04 <__ssputs_r+0xa8>
 8001daa:	9a01      	ldr	r2, [sp, #4]
 8001dac:	6921      	ldr	r1, [r4, #16]
 8001dae:	f000 fae2 	bl	8002376 <memcpy>
 8001db2:	89a2      	ldrh	r2, [r4, #12]
 8001db4:	4b18      	ldr	r3, [pc, #96]	@ (8001e18 <__ssputs_r+0xbc>)
 8001db6:	401a      	ands	r2, r3
 8001db8:	2380      	movs	r3, #128	@ 0x80
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	9b01      	ldr	r3, [sp, #4]
 8001dc0:	6126      	str	r6, [r4, #16]
 8001dc2:	18f6      	adds	r6, r6, r3
 8001dc4:	6026      	str	r6, [r4, #0]
 8001dc6:	003e      	movs	r6, r7
 8001dc8:	6165      	str	r5, [r4, #20]
 8001dca:	1aed      	subs	r5, r5, r3
 8001dcc:	60a5      	str	r5, [r4, #8]
 8001dce:	42be      	cmp	r6, r7
 8001dd0:	d900      	bls.n	8001dd4 <__ssputs_r+0x78>
 8001dd2:	003e      	movs	r6, r7
 8001dd4:	0032      	movs	r2, r6
 8001dd6:	9903      	ldr	r1, [sp, #12]
 8001dd8:	6820      	ldr	r0, [r4, #0]
 8001dda:	f000 fa9b 	bl	8002314 <memmove>
 8001dde:	2000      	movs	r0, #0
 8001de0:	68a3      	ldr	r3, [r4, #8]
 8001de2:	1b9b      	subs	r3, r3, r6
 8001de4:	60a3      	str	r3, [r4, #8]
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	199b      	adds	r3, r3, r6
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	b005      	add	sp, #20
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	002a      	movs	r2, r5
 8001df2:	9802      	ldr	r0, [sp, #8]
 8001df4:	f000 fac8 	bl	8002388 <_realloc_r>
 8001df8:	1e06      	subs	r6, r0, #0
 8001dfa:	d1e0      	bne.n	8001dbe <__ssputs_r+0x62>
 8001dfc:	6921      	ldr	r1, [r4, #16]
 8001dfe:	9802      	ldr	r0, [sp, #8]
 8001e00:	f7ff feb0 	bl	8001b64 <_free_r>
 8001e04:	230c      	movs	r3, #12
 8001e06:	2001      	movs	r0, #1
 8001e08:	9a02      	ldr	r2, [sp, #8]
 8001e0a:	4240      	negs	r0, r0
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	89a2      	ldrh	r2, [r4, #12]
 8001e10:	3334      	adds	r3, #52	@ 0x34
 8001e12:	4313      	orrs	r3, r2
 8001e14:	81a3      	strh	r3, [r4, #12]
 8001e16:	e7e9      	b.n	8001dec <__ssputs_r+0x90>
 8001e18:	fffffb7f 	.word	0xfffffb7f

08001e1c <_svfiprintf_r>:
 8001e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e1e:	b0a1      	sub	sp, #132	@ 0x84
 8001e20:	9003      	str	r0, [sp, #12]
 8001e22:	001d      	movs	r5, r3
 8001e24:	898b      	ldrh	r3, [r1, #12]
 8001e26:	000f      	movs	r7, r1
 8001e28:	0016      	movs	r6, r2
 8001e2a:	061b      	lsls	r3, r3, #24
 8001e2c:	d511      	bpl.n	8001e52 <_svfiprintf_r+0x36>
 8001e2e:	690b      	ldr	r3, [r1, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d10e      	bne.n	8001e52 <_svfiprintf_r+0x36>
 8001e34:	2140      	movs	r1, #64	@ 0x40
 8001e36:	f7ff ff01 	bl	8001c3c <_malloc_r>
 8001e3a:	6038      	str	r0, [r7, #0]
 8001e3c:	6138      	str	r0, [r7, #16]
 8001e3e:	2800      	cmp	r0, #0
 8001e40:	d105      	bne.n	8001e4e <_svfiprintf_r+0x32>
 8001e42:	230c      	movs	r3, #12
 8001e44:	9a03      	ldr	r2, [sp, #12]
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	2001      	movs	r0, #1
 8001e4a:	4240      	negs	r0, r0
 8001e4c:	e0cf      	b.n	8001fee <_svfiprintf_r+0x1d2>
 8001e4e:	2340      	movs	r3, #64	@ 0x40
 8001e50:	617b      	str	r3, [r7, #20]
 8001e52:	2300      	movs	r3, #0
 8001e54:	ac08      	add	r4, sp, #32
 8001e56:	6163      	str	r3, [r4, #20]
 8001e58:	3320      	adds	r3, #32
 8001e5a:	7663      	strb	r3, [r4, #25]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	76a3      	strb	r3, [r4, #26]
 8001e60:	9507      	str	r5, [sp, #28]
 8001e62:	0035      	movs	r5, r6
 8001e64:	782b      	ldrb	r3, [r5, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <_svfiprintf_r+0x52>
 8001e6a:	2b25      	cmp	r3, #37	@ 0x25
 8001e6c:	d148      	bne.n	8001f00 <_svfiprintf_r+0xe4>
 8001e6e:	1bab      	subs	r3, r5, r6
 8001e70:	9305      	str	r3, [sp, #20]
 8001e72:	42b5      	cmp	r5, r6
 8001e74:	d00b      	beq.n	8001e8e <_svfiprintf_r+0x72>
 8001e76:	0032      	movs	r2, r6
 8001e78:	0039      	movs	r1, r7
 8001e7a:	9803      	ldr	r0, [sp, #12]
 8001e7c:	f7ff ff6e 	bl	8001d5c <__ssputs_r>
 8001e80:	3001      	adds	r0, #1
 8001e82:	d100      	bne.n	8001e86 <_svfiprintf_r+0x6a>
 8001e84:	e0ae      	b.n	8001fe4 <_svfiprintf_r+0x1c8>
 8001e86:	6963      	ldr	r3, [r4, #20]
 8001e88:	9a05      	ldr	r2, [sp, #20]
 8001e8a:	189b      	adds	r3, r3, r2
 8001e8c:	6163      	str	r3, [r4, #20]
 8001e8e:	782b      	ldrb	r3, [r5, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d100      	bne.n	8001e96 <_svfiprintf_r+0x7a>
 8001e94:	e0a6      	b.n	8001fe4 <_svfiprintf_r+0x1c8>
 8001e96:	2201      	movs	r2, #1
 8001e98:	2300      	movs	r3, #0
 8001e9a:	4252      	negs	r2, r2
 8001e9c:	6062      	str	r2, [r4, #4]
 8001e9e:	a904      	add	r1, sp, #16
 8001ea0:	3254      	adds	r2, #84	@ 0x54
 8001ea2:	1852      	adds	r2, r2, r1
 8001ea4:	1c6e      	adds	r6, r5, #1
 8001ea6:	6023      	str	r3, [r4, #0]
 8001ea8:	60e3      	str	r3, [r4, #12]
 8001eaa:	60a3      	str	r3, [r4, #8]
 8001eac:	7013      	strb	r3, [r2, #0]
 8001eae:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001eb0:	4b54      	ldr	r3, [pc, #336]	@ (8002004 <_svfiprintf_r+0x1e8>)
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	7831      	ldrb	r1, [r6, #0]
 8001eb8:	9305      	str	r3, [sp, #20]
 8001eba:	f000 fa51 	bl	8002360 <memchr>
 8001ebe:	1c75      	adds	r5, r6, #1
 8001ec0:	2800      	cmp	r0, #0
 8001ec2:	d11f      	bne.n	8001f04 <_svfiprintf_r+0xe8>
 8001ec4:	6822      	ldr	r2, [r4, #0]
 8001ec6:	06d3      	lsls	r3, r2, #27
 8001ec8:	d504      	bpl.n	8001ed4 <_svfiprintf_r+0xb8>
 8001eca:	2353      	movs	r3, #83	@ 0x53
 8001ecc:	a904      	add	r1, sp, #16
 8001ece:	185b      	adds	r3, r3, r1
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	7019      	strb	r1, [r3, #0]
 8001ed4:	0713      	lsls	r3, r2, #28
 8001ed6:	d504      	bpl.n	8001ee2 <_svfiprintf_r+0xc6>
 8001ed8:	2353      	movs	r3, #83	@ 0x53
 8001eda:	a904      	add	r1, sp, #16
 8001edc:	185b      	adds	r3, r3, r1
 8001ede:	212b      	movs	r1, #43	@ 0x2b
 8001ee0:	7019      	strb	r1, [r3, #0]
 8001ee2:	7833      	ldrb	r3, [r6, #0]
 8001ee4:	2b2a      	cmp	r3, #42	@ 0x2a
 8001ee6:	d016      	beq.n	8001f16 <_svfiprintf_r+0xfa>
 8001ee8:	0035      	movs	r5, r6
 8001eea:	2100      	movs	r1, #0
 8001eec:	200a      	movs	r0, #10
 8001eee:	68e3      	ldr	r3, [r4, #12]
 8001ef0:	782a      	ldrb	r2, [r5, #0]
 8001ef2:	1c6e      	adds	r6, r5, #1
 8001ef4:	3a30      	subs	r2, #48	@ 0x30
 8001ef6:	2a09      	cmp	r2, #9
 8001ef8:	d950      	bls.n	8001f9c <_svfiprintf_r+0x180>
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d111      	bne.n	8001f22 <_svfiprintf_r+0x106>
 8001efe:	e017      	b.n	8001f30 <_svfiprintf_r+0x114>
 8001f00:	3501      	adds	r5, #1
 8001f02:	e7af      	b.n	8001e64 <_svfiprintf_r+0x48>
 8001f04:	9b05      	ldr	r3, [sp, #20]
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	1ac0      	subs	r0, r0, r3
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	4083      	lsls	r3, r0
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	002e      	movs	r6, r5
 8001f12:	6023      	str	r3, [r4, #0]
 8001f14:	e7cc      	b.n	8001eb0 <_svfiprintf_r+0x94>
 8001f16:	9b07      	ldr	r3, [sp, #28]
 8001f18:	1d19      	adds	r1, r3, #4
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	9107      	str	r1, [sp, #28]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	db01      	blt.n	8001f26 <_svfiprintf_r+0x10a>
 8001f22:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001f24:	e004      	b.n	8001f30 <_svfiprintf_r+0x114>
 8001f26:	425b      	negs	r3, r3
 8001f28:	60e3      	str	r3, [r4, #12]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	6023      	str	r3, [r4, #0]
 8001f30:	782b      	ldrb	r3, [r5, #0]
 8001f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f34:	d10c      	bne.n	8001f50 <_svfiprintf_r+0x134>
 8001f36:	786b      	ldrb	r3, [r5, #1]
 8001f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8001f3a:	d134      	bne.n	8001fa6 <_svfiprintf_r+0x18a>
 8001f3c:	9b07      	ldr	r3, [sp, #28]
 8001f3e:	3502      	adds	r5, #2
 8001f40:	1d1a      	adds	r2, r3, #4
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	9207      	str	r2, [sp, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	da01      	bge.n	8001f4e <_svfiprintf_r+0x132>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	425b      	negs	r3, r3
 8001f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f50:	4e2d      	ldr	r6, [pc, #180]	@ (8002008 <_svfiprintf_r+0x1ec>)
 8001f52:	2203      	movs	r2, #3
 8001f54:	0030      	movs	r0, r6
 8001f56:	7829      	ldrb	r1, [r5, #0]
 8001f58:	f000 fa02 	bl	8002360 <memchr>
 8001f5c:	2800      	cmp	r0, #0
 8001f5e:	d006      	beq.n	8001f6e <_svfiprintf_r+0x152>
 8001f60:	2340      	movs	r3, #64	@ 0x40
 8001f62:	1b80      	subs	r0, r0, r6
 8001f64:	4083      	lsls	r3, r0
 8001f66:	6822      	ldr	r2, [r4, #0]
 8001f68:	3501      	adds	r5, #1
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	6023      	str	r3, [r4, #0]
 8001f6e:	7829      	ldrb	r1, [r5, #0]
 8001f70:	2206      	movs	r2, #6
 8001f72:	4826      	ldr	r0, [pc, #152]	@ (800200c <_svfiprintf_r+0x1f0>)
 8001f74:	1c6e      	adds	r6, r5, #1
 8001f76:	7621      	strb	r1, [r4, #24]
 8001f78:	f000 f9f2 	bl	8002360 <memchr>
 8001f7c:	2800      	cmp	r0, #0
 8001f7e:	d038      	beq.n	8001ff2 <_svfiprintf_r+0x1d6>
 8001f80:	4b23      	ldr	r3, [pc, #140]	@ (8002010 <_svfiprintf_r+0x1f4>)
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d122      	bne.n	8001fcc <_svfiprintf_r+0x1b0>
 8001f86:	2207      	movs	r2, #7
 8001f88:	9b07      	ldr	r3, [sp, #28]
 8001f8a:	3307      	adds	r3, #7
 8001f8c:	4393      	bics	r3, r2
 8001f8e:	3308      	adds	r3, #8
 8001f90:	9307      	str	r3, [sp, #28]
 8001f92:	6963      	ldr	r3, [r4, #20]
 8001f94:	9a04      	ldr	r2, [sp, #16]
 8001f96:	189b      	adds	r3, r3, r2
 8001f98:	6163      	str	r3, [r4, #20]
 8001f9a:	e762      	b.n	8001e62 <_svfiprintf_r+0x46>
 8001f9c:	4343      	muls	r3, r0
 8001f9e:	0035      	movs	r5, r6
 8001fa0:	2101      	movs	r1, #1
 8001fa2:	189b      	adds	r3, r3, r2
 8001fa4:	e7a4      	b.n	8001ef0 <_svfiprintf_r+0xd4>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	200a      	movs	r0, #10
 8001faa:	0019      	movs	r1, r3
 8001fac:	3501      	adds	r5, #1
 8001fae:	6063      	str	r3, [r4, #4]
 8001fb0:	782a      	ldrb	r2, [r5, #0]
 8001fb2:	1c6e      	adds	r6, r5, #1
 8001fb4:	3a30      	subs	r2, #48	@ 0x30
 8001fb6:	2a09      	cmp	r2, #9
 8001fb8:	d903      	bls.n	8001fc2 <_svfiprintf_r+0x1a6>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0c8      	beq.n	8001f50 <_svfiprintf_r+0x134>
 8001fbe:	9109      	str	r1, [sp, #36]	@ 0x24
 8001fc0:	e7c6      	b.n	8001f50 <_svfiprintf_r+0x134>
 8001fc2:	4341      	muls	r1, r0
 8001fc4:	0035      	movs	r5, r6
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	1889      	adds	r1, r1, r2
 8001fca:	e7f1      	b.n	8001fb0 <_svfiprintf_r+0x194>
 8001fcc:	aa07      	add	r2, sp, #28
 8001fce:	9200      	str	r2, [sp, #0]
 8001fd0:	0021      	movs	r1, r4
 8001fd2:	003a      	movs	r2, r7
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <_svfiprintf_r+0x1f8>)
 8001fd6:	9803      	ldr	r0, [sp, #12]
 8001fd8:	e000      	b.n	8001fdc <_svfiprintf_r+0x1c0>
 8001fda:	bf00      	nop
 8001fdc:	9004      	str	r0, [sp, #16]
 8001fde:	9b04      	ldr	r3, [sp, #16]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	d1d6      	bne.n	8001f92 <_svfiprintf_r+0x176>
 8001fe4:	89bb      	ldrh	r3, [r7, #12]
 8001fe6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8001fe8:	065b      	lsls	r3, r3, #25
 8001fea:	d500      	bpl.n	8001fee <_svfiprintf_r+0x1d2>
 8001fec:	e72c      	b.n	8001e48 <_svfiprintf_r+0x2c>
 8001fee:	b021      	add	sp, #132	@ 0x84
 8001ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ff2:	aa07      	add	r2, sp, #28
 8001ff4:	9200      	str	r2, [sp, #0]
 8001ff6:	0021      	movs	r1, r4
 8001ff8:	003a      	movs	r2, r7
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <_svfiprintf_r+0x1f8>)
 8001ffc:	9803      	ldr	r0, [sp, #12]
 8001ffe:	f000 f87b 	bl	80020f8 <_printf_i>
 8002002:	e7eb      	b.n	8001fdc <_svfiprintf_r+0x1c0>
 8002004:	08002448 	.word	0x08002448
 8002008:	0800244e 	.word	0x0800244e
 800200c:	08002452 	.word	0x08002452
 8002010:	00000000 	.word	0x00000000
 8002014:	08001d5d 	.word	0x08001d5d

08002018 <_printf_common>:
 8002018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800201a:	0016      	movs	r6, r2
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	688a      	ldr	r2, [r1, #8]
 8002020:	690b      	ldr	r3, [r1, #16]
 8002022:	000c      	movs	r4, r1
 8002024:	9000      	str	r0, [sp, #0]
 8002026:	4293      	cmp	r3, r2
 8002028:	da00      	bge.n	800202c <_printf_common+0x14>
 800202a:	0013      	movs	r3, r2
 800202c:	0022      	movs	r2, r4
 800202e:	6033      	str	r3, [r6, #0]
 8002030:	3243      	adds	r2, #67	@ 0x43
 8002032:	7812      	ldrb	r2, [r2, #0]
 8002034:	2a00      	cmp	r2, #0
 8002036:	d001      	beq.n	800203c <_printf_common+0x24>
 8002038:	3301      	adds	r3, #1
 800203a:	6033      	str	r3, [r6, #0]
 800203c:	6823      	ldr	r3, [r4, #0]
 800203e:	069b      	lsls	r3, r3, #26
 8002040:	d502      	bpl.n	8002048 <_printf_common+0x30>
 8002042:	6833      	ldr	r3, [r6, #0]
 8002044:	3302      	adds	r3, #2
 8002046:	6033      	str	r3, [r6, #0]
 8002048:	6822      	ldr	r2, [r4, #0]
 800204a:	2306      	movs	r3, #6
 800204c:	0015      	movs	r5, r2
 800204e:	401d      	ands	r5, r3
 8002050:	421a      	tst	r2, r3
 8002052:	d027      	beq.n	80020a4 <_printf_common+0x8c>
 8002054:	0023      	movs	r3, r4
 8002056:	3343      	adds	r3, #67	@ 0x43
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	4193      	sbcs	r3, r2
 800205e:	6822      	ldr	r2, [r4, #0]
 8002060:	0692      	lsls	r2, r2, #26
 8002062:	d430      	bmi.n	80020c6 <_printf_common+0xae>
 8002064:	0022      	movs	r2, r4
 8002066:	9901      	ldr	r1, [sp, #4]
 8002068:	9800      	ldr	r0, [sp, #0]
 800206a:	9d08      	ldr	r5, [sp, #32]
 800206c:	3243      	adds	r2, #67	@ 0x43
 800206e:	47a8      	blx	r5
 8002070:	3001      	adds	r0, #1
 8002072:	d025      	beq.n	80020c0 <_printf_common+0xa8>
 8002074:	2206      	movs	r2, #6
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	2500      	movs	r5, #0
 800207a:	4013      	ands	r3, r2
 800207c:	2b04      	cmp	r3, #4
 800207e:	d105      	bne.n	800208c <_printf_common+0x74>
 8002080:	6833      	ldr	r3, [r6, #0]
 8002082:	68e5      	ldr	r5, [r4, #12]
 8002084:	1aed      	subs	r5, r5, r3
 8002086:	43eb      	mvns	r3, r5
 8002088:	17db      	asrs	r3, r3, #31
 800208a:	401d      	ands	r5, r3
 800208c:	68a3      	ldr	r3, [r4, #8]
 800208e:	6922      	ldr	r2, [r4, #16]
 8002090:	4293      	cmp	r3, r2
 8002092:	dd01      	ble.n	8002098 <_printf_common+0x80>
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	18ed      	adds	r5, r5, r3
 8002098:	2600      	movs	r6, #0
 800209a:	42b5      	cmp	r5, r6
 800209c:	d120      	bne.n	80020e0 <_printf_common+0xc8>
 800209e:	2000      	movs	r0, #0
 80020a0:	e010      	b.n	80020c4 <_printf_common+0xac>
 80020a2:	3501      	adds	r5, #1
 80020a4:	68e3      	ldr	r3, [r4, #12]
 80020a6:	6832      	ldr	r2, [r6, #0]
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	42ab      	cmp	r3, r5
 80020ac:	ddd2      	ble.n	8002054 <_printf_common+0x3c>
 80020ae:	0022      	movs	r2, r4
 80020b0:	2301      	movs	r3, #1
 80020b2:	9901      	ldr	r1, [sp, #4]
 80020b4:	9800      	ldr	r0, [sp, #0]
 80020b6:	9f08      	ldr	r7, [sp, #32]
 80020b8:	3219      	adds	r2, #25
 80020ba:	47b8      	blx	r7
 80020bc:	3001      	adds	r0, #1
 80020be:	d1f0      	bne.n	80020a2 <_printf_common+0x8a>
 80020c0:	2001      	movs	r0, #1
 80020c2:	4240      	negs	r0, r0
 80020c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80020c6:	2030      	movs	r0, #48	@ 0x30
 80020c8:	18e1      	adds	r1, r4, r3
 80020ca:	3143      	adds	r1, #67	@ 0x43
 80020cc:	7008      	strb	r0, [r1, #0]
 80020ce:	0021      	movs	r1, r4
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	3145      	adds	r1, #69	@ 0x45
 80020d4:	7809      	ldrb	r1, [r1, #0]
 80020d6:	18a2      	adds	r2, r4, r2
 80020d8:	3243      	adds	r2, #67	@ 0x43
 80020da:	3302      	adds	r3, #2
 80020dc:	7011      	strb	r1, [r2, #0]
 80020de:	e7c1      	b.n	8002064 <_printf_common+0x4c>
 80020e0:	0022      	movs	r2, r4
 80020e2:	2301      	movs	r3, #1
 80020e4:	9901      	ldr	r1, [sp, #4]
 80020e6:	9800      	ldr	r0, [sp, #0]
 80020e8:	9f08      	ldr	r7, [sp, #32]
 80020ea:	321a      	adds	r2, #26
 80020ec:	47b8      	blx	r7
 80020ee:	3001      	adds	r0, #1
 80020f0:	d0e6      	beq.n	80020c0 <_printf_common+0xa8>
 80020f2:	3601      	adds	r6, #1
 80020f4:	e7d1      	b.n	800209a <_printf_common+0x82>
	...

080020f8 <_printf_i>:
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020fa:	b08b      	sub	sp, #44	@ 0x2c
 80020fc:	9206      	str	r2, [sp, #24]
 80020fe:	000a      	movs	r2, r1
 8002100:	3243      	adds	r2, #67	@ 0x43
 8002102:	9307      	str	r3, [sp, #28]
 8002104:	9005      	str	r0, [sp, #20]
 8002106:	9203      	str	r2, [sp, #12]
 8002108:	7e0a      	ldrb	r2, [r1, #24]
 800210a:	000c      	movs	r4, r1
 800210c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800210e:	2a78      	cmp	r2, #120	@ 0x78
 8002110:	d809      	bhi.n	8002126 <_printf_i+0x2e>
 8002112:	2a62      	cmp	r2, #98	@ 0x62
 8002114:	d80b      	bhi.n	800212e <_printf_i+0x36>
 8002116:	2a00      	cmp	r2, #0
 8002118:	d100      	bne.n	800211c <_printf_i+0x24>
 800211a:	e0bc      	b.n	8002296 <_printf_i+0x19e>
 800211c:	497b      	ldr	r1, [pc, #492]	@ (800230c <_printf_i+0x214>)
 800211e:	9104      	str	r1, [sp, #16]
 8002120:	2a58      	cmp	r2, #88	@ 0x58
 8002122:	d100      	bne.n	8002126 <_printf_i+0x2e>
 8002124:	e090      	b.n	8002248 <_printf_i+0x150>
 8002126:	0025      	movs	r5, r4
 8002128:	3542      	adds	r5, #66	@ 0x42
 800212a:	702a      	strb	r2, [r5, #0]
 800212c:	e022      	b.n	8002174 <_printf_i+0x7c>
 800212e:	0010      	movs	r0, r2
 8002130:	3863      	subs	r0, #99	@ 0x63
 8002132:	2815      	cmp	r0, #21
 8002134:	d8f7      	bhi.n	8002126 <_printf_i+0x2e>
 8002136:	f7fd ffe7 	bl	8000108 <__gnu_thumb1_case_shi>
 800213a:	0016      	.short	0x0016
 800213c:	fff6001f 	.word	0xfff6001f
 8002140:	fff6fff6 	.word	0xfff6fff6
 8002144:	001ffff6 	.word	0x001ffff6
 8002148:	fff6fff6 	.word	0xfff6fff6
 800214c:	fff6fff6 	.word	0xfff6fff6
 8002150:	003600a1 	.word	0x003600a1
 8002154:	fff60080 	.word	0xfff60080
 8002158:	00b2fff6 	.word	0x00b2fff6
 800215c:	0036fff6 	.word	0x0036fff6
 8002160:	fff6fff6 	.word	0xfff6fff6
 8002164:	0084      	.short	0x0084
 8002166:	0025      	movs	r5, r4
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	3542      	adds	r5, #66	@ 0x42
 800216c:	1d11      	adds	r1, r2, #4
 800216e:	6019      	str	r1, [r3, #0]
 8002170:	6813      	ldr	r3, [r2, #0]
 8002172:	702b      	strb	r3, [r5, #0]
 8002174:	2301      	movs	r3, #1
 8002176:	e0a0      	b.n	80022ba <_printf_i+0x1c2>
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	6809      	ldr	r1, [r1, #0]
 800217c:	1d02      	adds	r2, r0, #4
 800217e:	060d      	lsls	r5, r1, #24
 8002180:	d50b      	bpl.n	800219a <_printf_i+0xa2>
 8002182:	6806      	ldr	r6, [r0, #0]
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	2e00      	cmp	r6, #0
 8002188:	da03      	bge.n	8002192 <_printf_i+0x9a>
 800218a:	232d      	movs	r3, #45	@ 0x2d
 800218c:	9a03      	ldr	r2, [sp, #12]
 800218e:	4276      	negs	r6, r6
 8002190:	7013      	strb	r3, [r2, #0]
 8002192:	4b5e      	ldr	r3, [pc, #376]	@ (800230c <_printf_i+0x214>)
 8002194:	270a      	movs	r7, #10
 8002196:	9304      	str	r3, [sp, #16]
 8002198:	e018      	b.n	80021cc <_printf_i+0xd4>
 800219a:	6806      	ldr	r6, [r0, #0]
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	0649      	lsls	r1, r1, #25
 80021a0:	d5f1      	bpl.n	8002186 <_printf_i+0x8e>
 80021a2:	b236      	sxth	r6, r6
 80021a4:	e7ef      	b.n	8002186 <_printf_i+0x8e>
 80021a6:	6808      	ldr	r0, [r1, #0]
 80021a8:	6819      	ldr	r1, [r3, #0]
 80021aa:	c940      	ldmia	r1!, {r6}
 80021ac:	0605      	lsls	r5, r0, #24
 80021ae:	d402      	bmi.n	80021b6 <_printf_i+0xbe>
 80021b0:	0640      	lsls	r0, r0, #25
 80021b2:	d500      	bpl.n	80021b6 <_printf_i+0xbe>
 80021b4:	b2b6      	uxth	r6, r6
 80021b6:	6019      	str	r1, [r3, #0]
 80021b8:	4b54      	ldr	r3, [pc, #336]	@ (800230c <_printf_i+0x214>)
 80021ba:	270a      	movs	r7, #10
 80021bc:	9304      	str	r3, [sp, #16]
 80021be:	2a6f      	cmp	r2, #111	@ 0x6f
 80021c0:	d100      	bne.n	80021c4 <_printf_i+0xcc>
 80021c2:	3f02      	subs	r7, #2
 80021c4:	0023      	movs	r3, r4
 80021c6:	2200      	movs	r2, #0
 80021c8:	3343      	adds	r3, #67	@ 0x43
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	6863      	ldr	r3, [r4, #4]
 80021ce:	60a3      	str	r3, [r4, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	db03      	blt.n	80021dc <_printf_i+0xe4>
 80021d4:	2104      	movs	r1, #4
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	438a      	bics	r2, r1
 80021da:	6022      	str	r2, [r4, #0]
 80021dc:	2e00      	cmp	r6, #0
 80021de:	d102      	bne.n	80021e6 <_printf_i+0xee>
 80021e0:	9d03      	ldr	r5, [sp, #12]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d00c      	beq.n	8002200 <_printf_i+0x108>
 80021e6:	9d03      	ldr	r5, [sp, #12]
 80021e8:	0030      	movs	r0, r6
 80021ea:	0039      	movs	r1, r7
 80021ec:	f7fe f81c 	bl	8000228 <__aeabi_uidivmod>
 80021f0:	9b04      	ldr	r3, [sp, #16]
 80021f2:	3d01      	subs	r5, #1
 80021f4:	5c5b      	ldrb	r3, [r3, r1]
 80021f6:	702b      	strb	r3, [r5, #0]
 80021f8:	0033      	movs	r3, r6
 80021fa:	0006      	movs	r6, r0
 80021fc:	429f      	cmp	r7, r3
 80021fe:	d9f3      	bls.n	80021e8 <_printf_i+0xf0>
 8002200:	2f08      	cmp	r7, #8
 8002202:	d109      	bne.n	8002218 <_printf_i+0x120>
 8002204:	6823      	ldr	r3, [r4, #0]
 8002206:	07db      	lsls	r3, r3, #31
 8002208:	d506      	bpl.n	8002218 <_printf_i+0x120>
 800220a:	6862      	ldr	r2, [r4, #4]
 800220c:	6923      	ldr	r3, [r4, #16]
 800220e:	429a      	cmp	r2, r3
 8002210:	dc02      	bgt.n	8002218 <_printf_i+0x120>
 8002212:	2330      	movs	r3, #48	@ 0x30
 8002214:	3d01      	subs	r5, #1
 8002216:	702b      	strb	r3, [r5, #0]
 8002218:	9b03      	ldr	r3, [sp, #12]
 800221a:	1b5b      	subs	r3, r3, r5
 800221c:	6123      	str	r3, [r4, #16]
 800221e:	9b07      	ldr	r3, [sp, #28]
 8002220:	0021      	movs	r1, r4
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	9805      	ldr	r0, [sp, #20]
 8002226:	9b06      	ldr	r3, [sp, #24]
 8002228:	aa09      	add	r2, sp, #36	@ 0x24
 800222a:	f7ff fef5 	bl	8002018 <_printf_common>
 800222e:	3001      	adds	r0, #1
 8002230:	d148      	bne.n	80022c4 <_printf_i+0x1cc>
 8002232:	2001      	movs	r0, #1
 8002234:	4240      	negs	r0, r0
 8002236:	b00b      	add	sp, #44	@ 0x2c
 8002238:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800223a:	2220      	movs	r2, #32
 800223c:	6809      	ldr	r1, [r1, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	6022      	str	r2, [r4, #0]
 8002242:	2278      	movs	r2, #120	@ 0x78
 8002244:	4932      	ldr	r1, [pc, #200]	@ (8002310 <_printf_i+0x218>)
 8002246:	9104      	str	r1, [sp, #16]
 8002248:	0021      	movs	r1, r4
 800224a:	3145      	adds	r1, #69	@ 0x45
 800224c:	700a      	strb	r2, [r1, #0]
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	6822      	ldr	r2, [r4, #0]
 8002252:	c940      	ldmia	r1!, {r6}
 8002254:	0610      	lsls	r0, r2, #24
 8002256:	d402      	bmi.n	800225e <_printf_i+0x166>
 8002258:	0650      	lsls	r0, r2, #25
 800225a:	d500      	bpl.n	800225e <_printf_i+0x166>
 800225c:	b2b6      	uxth	r6, r6
 800225e:	6019      	str	r1, [r3, #0]
 8002260:	07d3      	lsls	r3, r2, #31
 8002262:	d502      	bpl.n	800226a <_printf_i+0x172>
 8002264:	2320      	movs	r3, #32
 8002266:	4313      	orrs	r3, r2
 8002268:	6023      	str	r3, [r4, #0]
 800226a:	2e00      	cmp	r6, #0
 800226c:	d001      	beq.n	8002272 <_printf_i+0x17a>
 800226e:	2710      	movs	r7, #16
 8002270:	e7a8      	b.n	80021c4 <_printf_i+0xcc>
 8002272:	2220      	movs	r2, #32
 8002274:	6823      	ldr	r3, [r4, #0]
 8002276:	4393      	bics	r3, r2
 8002278:	6023      	str	r3, [r4, #0]
 800227a:	e7f8      	b.n	800226e <_printf_i+0x176>
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	680d      	ldr	r5, [r1, #0]
 8002280:	1d10      	adds	r0, r2, #4
 8002282:	6949      	ldr	r1, [r1, #20]
 8002284:	6018      	str	r0, [r3, #0]
 8002286:	6813      	ldr	r3, [r2, #0]
 8002288:	062e      	lsls	r6, r5, #24
 800228a:	d501      	bpl.n	8002290 <_printf_i+0x198>
 800228c:	6019      	str	r1, [r3, #0]
 800228e:	e002      	b.n	8002296 <_printf_i+0x19e>
 8002290:	066d      	lsls	r5, r5, #25
 8002292:	d5fb      	bpl.n	800228c <_printf_i+0x194>
 8002294:	8019      	strh	r1, [r3, #0]
 8002296:	2300      	movs	r3, #0
 8002298:	9d03      	ldr	r5, [sp, #12]
 800229a:	6123      	str	r3, [r4, #16]
 800229c:	e7bf      	b.n	800221e <_printf_i+0x126>
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	1d11      	adds	r1, r2, #4
 80022a2:	6019      	str	r1, [r3, #0]
 80022a4:	6815      	ldr	r5, [r2, #0]
 80022a6:	2100      	movs	r1, #0
 80022a8:	0028      	movs	r0, r5
 80022aa:	6862      	ldr	r2, [r4, #4]
 80022ac:	f000 f858 	bl	8002360 <memchr>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	d001      	beq.n	80022b8 <_printf_i+0x1c0>
 80022b4:	1b40      	subs	r0, r0, r5
 80022b6:	6060      	str	r0, [r4, #4]
 80022b8:	6863      	ldr	r3, [r4, #4]
 80022ba:	6123      	str	r3, [r4, #16]
 80022bc:	2300      	movs	r3, #0
 80022be:	9a03      	ldr	r2, [sp, #12]
 80022c0:	7013      	strb	r3, [r2, #0]
 80022c2:	e7ac      	b.n	800221e <_printf_i+0x126>
 80022c4:	002a      	movs	r2, r5
 80022c6:	6923      	ldr	r3, [r4, #16]
 80022c8:	9906      	ldr	r1, [sp, #24]
 80022ca:	9805      	ldr	r0, [sp, #20]
 80022cc:	9d07      	ldr	r5, [sp, #28]
 80022ce:	47a8      	blx	r5
 80022d0:	3001      	adds	r0, #1
 80022d2:	d0ae      	beq.n	8002232 <_printf_i+0x13a>
 80022d4:	6823      	ldr	r3, [r4, #0]
 80022d6:	079b      	lsls	r3, r3, #30
 80022d8:	d415      	bmi.n	8002306 <_printf_i+0x20e>
 80022da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80022dc:	68e0      	ldr	r0, [r4, #12]
 80022de:	4298      	cmp	r0, r3
 80022e0:	daa9      	bge.n	8002236 <_printf_i+0x13e>
 80022e2:	0018      	movs	r0, r3
 80022e4:	e7a7      	b.n	8002236 <_printf_i+0x13e>
 80022e6:	0022      	movs	r2, r4
 80022e8:	2301      	movs	r3, #1
 80022ea:	9906      	ldr	r1, [sp, #24]
 80022ec:	9805      	ldr	r0, [sp, #20]
 80022ee:	9e07      	ldr	r6, [sp, #28]
 80022f0:	3219      	adds	r2, #25
 80022f2:	47b0      	blx	r6
 80022f4:	3001      	adds	r0, #1
 80022f6:	d09c      	beq.n	8002232 <_printf_i+0x13a>
 80022f8:	3501      	adds	r5, #1
 80022fa:	68e3      	ldr	r3, [r4, #12]
 80022fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	42ab      	cmp	r3, r5
 8002302:	dcf0      	bgt.n	80022e6 <_printf_i+0x1ee>
 8002304:	e7e9      	b.n	80022da <_printf_i+0x1e2>
 8002306:	2500      	movs	r5, #0
 8002308:	e7f7      	b.n	80022fa <_printf_i+0x202>
 800230a:	46c0      	nop			@ (mov r8, r8)
 800230c:	08002459 	.word	0x08002459
 8002310:	0800246a 	.word	0x0800246a

08002314 <memmove>:
 8002314:	b510      	push	{r4, lr}
 8002316:	4288      	cmp	r0, r1
 8002318:	d806      	bhi.n	8002328 <memmove+0x14>
 800231a:	2300      	movs	r3, #0
 800231c:	429a      	cmp	r2, r3
 800231e:	d008      	beq.n	8002332 <memmove+0x1e>
 8002320:	5ccc      	ldrb	r4, [r1, r3]
 8002322:	54c4      	strb	r4, [r0, r3]
 8002324:	3301      	adds	r3, #1
 8002326:	e7f9      	b.n	800231c <memmove+0x8>
 8002328:	188b      	adds	r3, r1, r2
 800232a:	4298      	cmp	r0, r3
 800232c:	d2f5      	bcs.n	800231a <memmove+0x6>
 800232e:	3a01      	subs	r2, #1
 8002330:	d200      	bcs.n	8002334 <memmove+0x20>
 8002332:	bd10      	pop	{r4, pc}
 8002334:	5c8b      	ldrb	r3, [r1, r2]
 8002336:	5483      	strb	r3, [r0, r2]
 8002338:	e7f9      	b.n	800232e <memmove+0x1a>
	...

0800233c <_sbrk_r>:
 800233c:	2300      	movs	r3, #0
 800233e:	b570      	push	{r4, r5, r6, lr}
 8002340:	4d06      	ldr	r5, [pc, #24]	@ (800235c <_sbrk_r+0x20>)
 8002342:	0004      	movs	r4, r0
 8002344:	0008      	movs	r0, r1
 8002346:	602b      	str	r3, [r5, #0]
 8002348:	f7fe ff78 	bl	800123c <_sbrk>
 800234c:	1c43      	adds	r3, r0, #1
 800234e:	d103      	bne.n	8002358 <_sbrk_r+0x1c>
 8002350:	682b      	ldr	r3, [r5, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d000      	beq.n	8002358 <_sbrk_r+0x1c>
 8002356:	6023      	str	r3, [r4, #0]
 8002358:	bd70      	pop	{r4, r5, r6, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	200001e8 	.word	0x200001e8

08002360 <memchr>:
 8002360:	b2c9      	uxtb	r1, r1
 8002362:	1882      	adds	r2, r0, r2
 8002364:	4290      	cmp	r0, r2
 8002366:	d101      	bne.n	800236c <memchr+0xc>
 8002368:	2000      	movs	r0, #0
 800236a:	4770      	bx	lr
 800236c:	7803      	ldrb	r3, [r0, #0]
 800236e:	428b      	cmp	r3, r1
 8002370:	d0fb      	beq.n	800236a <memchr+0xa>
 8002372:	3001      	adds	r0, #1
 8002374:	e7f6      	b.n	8002364 <memchr+0x4>

08002376 <memcpy>:
 8002376:	2300      	movs	r3, #0
 8002378:	b510      	push	{r4, lr}
 800237a:	429a      	cmp	r2, r3
 800237c:	d100      	bne.n	8002380 <memcpy+0xa>
 800237e:	bd10      	pop	{r4, pc}
 8002380:	5ccc      	ldrb	r4, [r1, r3]
 8002382:	54c4      	strb	r4, [r0, r3]
 8002384:	3301      	adds	r3, #1
 8002386:	e7f8      	b.n	800237a <memcpy+0x4>

08002388 <_realloc_r>:
 8002388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800238a:	0006      	movs	r6, r0
 800238c:	000c      	movs	r4, r1
 800238e:	0015      	movs	r5, r2
 8002390:	2900      	cmp	r1, #0
 8002392:	d105      	bne.n	80023a0 <_realloc_r+0x18>
 8002394:	0011      	movs	r1, r2
 8002396:	f7ff fc51 	bl	8001c3c <_malloc_r>
 800239a:	0004      	movs	r4, r0
 800239c:	0020      	movs	r0, r4
 800239e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023a0:	2a00      	cmp	r2, #0
 80023a2:	d103      	bne.n	80023ac <_realloc_r+0x24>
 80023a4:	f7ff fbde 	bl	8001b64 <_free_r>
 80023a8:	2400      	movs	r4, #0
 80023aa:	e7f7      	b.n	800239c <_realloc_r+0x14>
 80023ac:	f000 f81b 	bl	80023e6 <_malloc_usable_size_r>
 80023b0:	0007      	movs	r7, r0
 80023b2:	4285      	cmp	r5, r0
 80023b4:	d802      	bhi.n	80023bc <_realloc_r+0x34>
 80023b6:	0843      	lsrs	r3, r0, #1
 80023b8:	42ab      	cmp	r3, r5
 80023ba:	d3ef      	bcc.n	800239c <_realloc_r+0x14>
 80023bc:	0029      	movs	r1, r5
 80023be:	0030      	movs	r0, r6
 80023c0:	f7ff fc3c 	bl	8001c3c <_malloc_r>
 80023c4:	9001      	str	r0, [sp, #4]
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d0ee      	beq.n	80023a8 <_realloc_r+0x20>
 80023ca:	002a      	movs	r2, r5
 80023cc:	42bd      	cmp	r5, r7
 80023ce:	d900      	bls.n	80023d2 <_realloc_r+0x4a>
 80023d0:	003a      	movs	r2, r7
 80023d2:	0021      	movs	r1, r4
 80023d4:	9801      	ldr	r0, [sp, #4]
 80023d6:	f7ff ffce 	bl	8002376 <memcpy>
 80023da:	0021      	movs	r1, r4
 80023dc:	0030      	movs	r0, r6
 80023de:	f7ff fbc1 	bl	8001b64 <_free_r>
 80023e2:	9c01      	ldr	r4, [sp, #4]
 80023e4:	e7da      	b.n	800239c <_realloc_r+0x14>

080023e6 <_malloc_usable_size_r>:
 80023e6:	1f0b      	subs	r3, r1, #4
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1f18      	subs	r0, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	da01      	bge.n	80023f4 <_malloc_usable_size_r+0xe>
 80023f0:	580b      	ldr	r3, [r1, r0]
 80023f2:	18c0      	adds	r0, r0, r3
 80023f4:	4770      	bx	lr
	...

080023f8 <_init>:
 80023f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023fa:	46c0      	nop			@ (mov r8, r8)
 80023fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023fe:	bc08      	pop	{r3}
 8002400:	469e      	mov	lr, r3
 8002402:	4770      	bx	lr

08002404 <_fini>:
 8002404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002406:	46c0      	nop			@ (mov r8, r8)
 8002408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800240a:	bc08      	pop	{r3}
 800240c:	469e      	mov	lr, r3
 800240e:	4770      	bx	lr
